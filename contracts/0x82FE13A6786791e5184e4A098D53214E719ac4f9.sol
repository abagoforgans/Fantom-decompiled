contract main {




// =====================  Runtime code  =====================


#
#  - sub_11d1a392(?)
#  - withdraw(uint256 arg1)
#  - resetApprovals()
#  - sub_39e3ad19(?)
#  - approveContracts()
#  - rebalanceCollateral()
#  - withdrawAll()
#  - sub_ae263a1d(?)
#  - sub_d2b49a92(?)
#  - sub_d2d9a69d(?)
#  - sub_de6c2379(?)
#
const sub_2cf4e4ee(?) = ext_call.return_data[0]

const routerAddress = 0xf491e7b69e4244ad4002bc14e878a34207e38c29

const sub_3ad184e4(?) = 0x328a7b4d538a2b3942653a9983fda3c12c571141

const sub_668ecbf2(?) = 0xb77b223490e1f5951ec79a8d09db9eab2adcb934

const comptrollerAddress = 0x4250a6d3bd57455d7c6821eecb6206f507576cd2

const sub_6c1a35be(?) = 0x2b4c76d0dc16be1c31d4c1dc53bf9b45987fc75c

const farmPid = 2

const sub_b2ad2f0f(?) = 0xd528697008ac67a21818751a5e3c58c8dae54696

const sub_c1e32a3d(?) = 0xec7178f4c41f346b2721907f5cf7628e388a7a58

const farmToken = 0x841fad6eae12c286d1fd18d1d525dffa75c7effe

const sub_e43e7b94(?) = 0x657a1861c15a3ded9af0b6799a195a249ebdcbc6

const farmAddress = 0x2b2929e785374c651a81a63878ab22742656dcdd


uint256 stor0;
address owner;
mapping of uint256 balanceOf;
mapping of uint256 allowance;
uint256 totalSupply;
array of uint256 name;
array of uint256 symbol;
uint8 decimals;
address stor7;
address stor7; offset 8
address stor9;
address stor10;
address stor11;
address stor12;
uint256 stor13;
uint256 sub_39bb9c24;
uint256 sub_54b1a6d8;
address stor16;
address stor17;
address stor18;
address stor21;
address strategistAddress;
address keeperAddress;
uint256 sub_1fa98a80;
uint256 sub_f8c1e75e;
uint256 sub_7acd7922;
uint256 sub_a9b0ca38;
uint256 sub_be48a8f1;
uint256 sub_3e44de51;
uint256 sub_c089f572;
uint256 sub_f90766a6;
uint256 sub_9071c8d5;
uint256 sub_04b2b886;
uint256 lastHarvest;
uint256 reserveAllocation;
uint256 depositLimit;
uint256 sub_2eb6fb8b;

function sub_04b2b886(?) payable {
    return sub_04b2b886
}

function name() payable {
    return name[0 len name.length]
}

function totalSupply() payable {
    return totalSupply
}

function sub_1fa98a80(?) payable {
    return sub_1fa98a80
}

function strategist() payable {
    return strategistAddress
}

function sub_2eb6fb8b(?) payable {
    return sub_2eb6fb8b
}

function decimals() payable {
    return decimals
}

function sub_39bb9c24(?) payable {
    return sub_39bb9c24
}

function sub_3e44de51(?) payable {
    return sub_3e44de51
}

function sub_54b1a6d8(?) payable {
    return sub_54b1a6d8
}

function balanceOf(address arg1) payable {
    require calldata.size - 4 >= 32
    return balanceOf[address(arg1)]
}

function sub_7acd7922(?) payable {
    return sub_7acd7922
}

function owner() payable {
    return owner
}

function sub_9071c8d5(?) payable {
    return sub_9071c8d5
}

function symbol() payable {
    return symbol[0 len symbol.length]
}

function sub_a9b0ca38(?) payable {
    return sub_a9b0ca38
}

function keeper() payable {
    return keeperAddress
}

function sub_be48a8f1(?) payable {
    return sub_be48a8f1
}

function sub_c089f572(?) payable {
    return sub_c089f572
}

function allowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return allowance[address(arg1)][address(arg2)]
}

function depositLimit() payable {
    return depositLimit
}

function lastHarvest() payable {
    return lastHarvest
}

function sub_f8c1e75e(?) payable {
    return sub_f8c1e75e
}

function reserveAllocation() payable {
    return reserveAllocation
}

function sub_f90766a6(?) payable {
    return sub_f90766a6
}

function _fallback() payable {
    revert
}

function isOwner() payable {
    return (msg.sender == owner)
}

function sub_bf428341(?) payable {
    require calldata.size - 4 >= 64
    require msg.sender == owner
    sub_39bb9c24 = arg1
    sub_54b1a6d8 = arg2
}

function sub_b574d287(?) payable {
    require calldata.size - 4 >= 64
    require msg.sender == owner
    require arg1 <= 50000
    sub_1fa98a80 = arg2
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setKeeper(address arg1) payable {
    require calldata.size - 4 >= 32
    require msg.sender == owner
    require arg1
    keeperAddress = arg1
    emit UpdatedKeeper(arg1);
}

function setStrategist(address arg1) payable {
    require calldata.size - 4 >= 32
    require msg.sender == owner
    require arg1
    strategistAddress = arg1
    emit UpdatedStrategist(arg1);
}

function sub_73d121db(?) payable {
    require calldata.size - 4 >= 64
    require msg.sender == owner
    require arg1 <= 10^6
    require arg2 >= 10^6
    sub_be48a8f1 = arg2
    sub_3e44de51 = arg1
}

function setFees(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require msg.sender == owner
    require arg1 <= 50000
    require arg2 <= 100000
    sub_c089f572 = arg1
    sub_f90766a6 = arg2
}

function sub_94c04ced(?) payable {
    require calldata.size - 4 >= 96
    require msg.sender == owner
    require 750000 > arg2
    require arg2 >= arg3
    require arg3 >= arg1
    sub_f8c1e75e = arg2
    sub_7acd7922 = arg3
    sub_a9b0ca38 = arg1
}

function sub_8ad56bff(?) payable {
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_c3b49f3d(?) payable {
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_feb6848a(?) payable {
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_c5aaf86a(?) payable {
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_26eb07b6(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
    call 0x328a7b4d538a2b3942653a9983fda3c12c571141.mint(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_5627f7b5(?) payable {
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args 0x328a7b4d538a2b3942653a9983fda3c12c571141
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_eb61c72a(?) payable {
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x654f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function sub_740ab621(?) payable {
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    call stor11.deposit(uint256 arg1, uint256 arg2) with:
         gas gas_remaining wei
        args stor13, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_b0729c55(?) payable {
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    call stor11.withdraw(uint256 arg1, uint256 arg2) with:
         gas gas_remaining wei
        args stor13, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_3f25cd6a(?) payable {
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0xf08e9671 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    if 10^6 * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    return (10^6 * ext_call.return_data[0] / 10000)
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 > allowance[address(msg.sender)][address(arg1)]:
        revert with 0, 
                    32,
                    37,
                    0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572,
                    mem[165 len 27],
                    mem[219 len 5]
    if not msg.sender:
        revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
    if not arg1:
        revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
    allowance[address(msg.sender)][address(arg1)] -= arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 + allowance[address(msg.sender)][address(arg1)] < allowance[address(msg.sender)][address(arg1)]:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    36,
                    0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                    mem[200 len 28]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573,
                    mem[198 len 30]
    allowance[address(msg.sender)][address(arg1)] += arg2
    emit Approval((arg2 + allowance[address(msg.sender)][address(arg1)]), msg.sender, arg1);
    return 1
}

function sub_7d3795c7(?) payable {
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0]:
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        call 0xd528697008ac67a21818751a5e3c58c8dae54696.repayBorrow(uint256 arg1) with:
             gas gas_remaining wei
            args ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
}

function sub_a9c19c66(?) payable {
    require ext_code.size(stor21)
    staticcall stor21.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
    staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function transfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    37,
                    0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                    mem[201 len 27]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    35,
                    0xfe45524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                    mem[199 len 29]
    if arg2 > balanceOf[address(msg.sender)]:
        revert with 0, 
                    32,
                    38,
                    0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                    mem[166 len 26],
                    mem[218 len 6]
    balanceOf[address(msg.sender)] -= arg2
    if arg2 + balanceOf[arg1] < balanceOf[arg1]:
        revert with 0, 'SafeMath: addition overflow'
    balanceOf[address(arg1)] = arg2 + balanceOf[arg1]
    emit Transfer(arg2, msg.sender, arg1);
    return 1
}

function sub_4d54e307(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not arg1:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0])
    if ext_call.return_data[0] * arg1 / arg1 != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    return (ext_call.return_data[0] * arg1 / ext_call.return_data[0])
}

function sub_7fcfa3f6(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not arg1:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0])
    if ext_call.return_data[0] * arg1 / arg1 != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    return (ext_call.return_data[0] * arg1 / ext_call.return_data[0])
}

function sub_7845790c(?) payable {
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0])
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    return (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
}

function sub_cad20a29(?) payable {
    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0])
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    return (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
}

function transferFrom(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    37,
                    0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                    mem[201 len 27]
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    35,
                    0xfe45524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                    mem[199 len 29]
    if arg3 > balanceOf[address(arg1)]:
        revert with 0, 
                    32,
                    38,
                    0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                    mem[166 len 26],
                    mem[218 len 6]
    balanceOf[address(arg1)] -= arg3
    if arg3 + balanceOf[arg2] < balanceOf[arg2]:
        revert with 0, 'SafeMath: addition overflow'
    balanceOf[address(arg2)] = arg3 + balanceOf[arg2]
    emit Transfer(arg3, arg1, arg2);
    if arg3 > allowance[address(arg1)][address(msg.sender)]:
        revert with 0, 
                    32,
                    40,
                    0x7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63,
                    mem[264 len 24],
                    mem[312 len 8]
    if not arg1:
        revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[392 len 28]
    if not msg.sender:
        revert with 0, 32, 34, 0x7345524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[390 len 30]
    allowance[address(arg1)][address(msg.sender)] -= arg3
    emit Approval((allowance[address(arg1)][address(msg.sender)] - arg3), arg1, msg.sender);
    return 1
}

function sub_3ccbcfdc(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not arg1:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        call 0xd528697008ac67a21818751a5e3c58c8dae54696.borrow(uint256 arg1) with:
             gas gas_remaining wei
            args (0 / ext_call.return_data[0])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return (0 / ext_call.return_data[0])
    if ext_call.return_data[0] * arg1 / arg1 != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
    call 0xd528697008ac67a21818751a5e3c58c8dae54696.borrow(uint256 arg1) with:
         gas gas_remaining wei
        args (ext_call.return_data[0] * arg1 / ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return (ext_call.return_data[0] * arg1 / ext_call.return_data[0])
}

function sub_9006d918(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not arg1:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        mem[516 len 0] = None
        require ext_code.size(stor12)
        call stor12.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg1, 0 / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
    else:
        if ext_call.return_data[0] * arg1 / arg1 != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not ext_call.return_data[0] * arg1:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            mem[516 len 0] = None
            require ext_code.size(stor12)
            call stor12.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg1, 0 / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
        else:
            if sub_39bb9c24 * ext_call.return_data[0] * arg1 / ext_call.return_data[0] * arg1 != sub_39bb9c24:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            mem[516 len 0] = None
            require ext_code.size(stor12)
            call stor12.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg1, sub_39bb9c24 * ext_call.return_data[0] * arg1 / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_d00148e0(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not arg1:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        mem[516 len 0] = None
        require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
        call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg1, 0 / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
    else:
        if ext_call.return_data[0] * arg1 / arg1 != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not ext_call.return_data[0] * arg1:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            mem[516 len 0] = None
            require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
            call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg1, 0 / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
        else:
            if sub_39bb9c24 * ext_call.return_data[0] * arg1 / ext_call.return_data[0] * arg1 != sub_39bb9c24:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            mem[516 len 0] = None
            require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
            call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg1, sub_39bb9c24 * ext_call.return_data[0] * arg1 / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_bbfc7471(?) payable {
    require msg.sender == owner
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        mem[516 len 0] = None
        require ext_code.size(stor12)
        call stor12.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args ext_call.return_data[0], 0 / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
    else:
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not ext_call.return_data[0] * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            mem[516 len 0] = None
            require ext_code.size(stor12)
            call stor12.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], 0 / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
        else:
            if sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] != sub_39bb9c24:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            mem[516 len 0] = None
            require ext_code.size(stor12)
            call stor12.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args ext_call.return_data[0], sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, Array(len=2, data=mem[516 len 64]), address(this.address), block.timestamp + 120
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_5f68df0c(?) payable {
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (0 / ext_call.return_data[0])
        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0])
    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    return (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
}

function sub_883dd547(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not arg1:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            if not arg1:
                require ext_code.size(stor10)
                call stor10.0xf1efacf9 with:
                     gas gas_remaining wei
                    args stor17, 0 / ext_call.return_data[0], arg1, 0, 0
            else:
                if sub_39bb9c24 * arg1 / arg1 != sub_39bb9c24:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                require ext_code.size(stor10)
                call stor10.0xf1efacf9 with:
                     gas gas_remaining wei
                    args stor17, 0 / ext_call.return_data[0], arg1, 0, sub_39bb9c24 * arg1 / 10^6
        else:
            if sub_39bb9c24 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != sub_39bb9c24:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if not arg1:
                require ext_code.size(stor10)
                call stor10.0xf1efacf9 with:
                     gas gas_remaining wei
                    args stor17, 0 / ext_call.return_data[0], arg1, sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, 0
            else:
                if sub_39bb9c24 * arg1 / arg1 != sub_39bb9c24:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                require ext_code.size(stor10)
                call stor10.0xf1efacf9 with:
                     gas gas_remaining wei
                    args stor17, 0 / ext_call.return_data[0], arg1, sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, sub_39bb9c24 * arg1 / 10^6
    else:
        if ext_call.return_data[0] * arg1 / arg1 != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] * arg1 / ext_call.return_data[0]:
            if not arg1:
                require ext_code.size(stor10)
                call stor10.0xf1efacf9 with:
                     gas gas_remaining wei
                    args stor17, ext_call.return_data[0] * arg1 / ext_call.return_data[0], arg1, 0, 0
            else:
                if sub_39bb9c24 * arg1 / arg1 != sub_39bb9c24:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                require ext_code.size(stor10)
                call stor10.0xf1efacf9 with:
                     gas gas_remaining wei
                    args stor17, ext_call.return_data[0] * arg1 / ext_call.return_data[0], arg1, 0, sub_39bb9c24 * arg1 / 10^6
        else:
            if sub_39bb9c24 * ext_call.return_data[0] * arg1 / ext_call.return_data[0] / ext_call.return_data[0] * arg1 / ext_call.return_data[0] != sub_39bb9c24:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if not arg1:
                require ext_code.size(stor10)
                call stor10.0xf1efacf9 with:
                     gas gas_remaining wei
                    args stor17, ext_call.return_data[0] * arg1 / ext_call.return_data[0], arg1, sub_39bb9c24 * ext_call.return_data[0] * arg1 / ext_call.return_data[0] / 10^6, 0
            else:
                if sub_39bb9c24 * arg1 / arg1 != sub_39bb9c24:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                require ext_code.size(stor10)
                call stor10.0xf1efacf9 with:
                     gas gas_remaining wei
                    args stor17, ext_call.return_data[0] * arg1 / ext_call.return_data[0], arg1, sub_39bb9c24 * ext_call.return_data[0] * arg1 / ext_call.return_data[0] / 10^6, sub_39bb9c24 * arg1 / 10^6
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function sub_e6e7114b(?) payable {
    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
        staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if 0 / ext_call.return_data[0]:
                if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: division by zero'
            return (0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
        if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * 0 / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor21)
    staticcall stor21.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
    staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if 10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        revert with 0, 'SafeMath: division by zero'
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
    if 10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        revert with 0, 'SafeMath: division by zero'
    return (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function sub_ec079f38(?) payable {
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (0 / ext_call.return_data[0])
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (0 / ext_call.return_data[0])
        if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
    if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0])
    if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0])
    if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    return (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
}

function sub_8217d6b3(?) payable {
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / ext_call.return_data[0]:
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp + 15
                else:
                    if sub_39bb9c24 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], 0, sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, address(this.address), block.timestamp + 15
            else:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp + 15
                else:
                    if sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, address(this.address), block.timestamp + 15
        else:
            if sub_39bb9c24 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != sub_39bb9c24:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / ext_call.return_data[0]:
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, 0, address(this.address), block.timestamp + 15
                else:
                    if sub_39bb9c24 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, address(this.address), block.timestamp + 15
            else:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, 0, address(this.address), block.timestamp + 15
                else:
                    if sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, address(this.address), block.timestamp + 15
    else:
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / ext_call.return_data[0]:
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp + 15
                else:
                    if sub_39bb9c24 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], 0, sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, address(this.address), block.timestamp + 15
            else:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], 0, 0, address(this.address), block.timestamp + 15
                else:
                    if sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], 0, sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, address(this.address), block.timestamp + 15
        else:
            if sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / ext_call.return_data[0]:
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, 0, address(this.address), block.timestamp + 15
                else:
                    if sub_39bb9c24 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, sub_39bb9c24 * 0 / ext_call.return_data[0] / 10^6, address(this.address), block.timestamp + 15
            else:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, 0, address(this.address), block.timestamp + 15
                else:
                    if sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != sub_39bb9c24:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    require ext_code.size(0xf491e7b69e4244ad4002bc14e878a34207e38c29)
                    call 0xf491e7b69e4244ad4002bc14e878a34207e38c29.removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
                         gas gas_remaining wei
                        args stor17, address(stor7.field_0), ext_call.return_data[0], sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, sub_39bb9c24 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^6, address(this.address), block.timestamp + 15
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
}

function sub_8555e2e5(?) payable {
    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor9)
        staticcall stor9.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor11)
        staticcall stor11.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args stor13, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor9)
        staticcall stor9.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not 0 / ext_call.return_data[0]:
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / 0 / ext_call.return_data[0])
                if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0])
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 2 * 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not 0 / ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / 0 / ext_call.return_data[0])
                if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0])
            if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
            if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * 0 / ext_call.return_data[0] / ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
        if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not 0 / ext_call.return_data[0]:
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / 0 / ext_call.return_data[0])
            if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0])
        if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not 0 / ext_call.return_data[0]:
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / 0 / ext_call.return_data[0])
            if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0])
        if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (0 / ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
        if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * 0 / ext_call.return_data[0] / ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / 0 / ext_call.return_data[0])
            if 10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 0 / ext_call.return_data[0])
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / 0 / ext_call.return_data[0])
            if 10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 0 / ext_call.return_data[0])
        if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (0 / ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
        if 10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
    if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (0 / 0 / ext_call.return_data[0])
        if 10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not 0 / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 0 / ext_call.return_data[0])
    if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (0 / 0 / ext_call.return_data[0])
        if 10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not 0 / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 0 / ext_call.return_data[0])
    if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
        if not ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
    if 10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if not ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    return (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
}

function sub_250ad965(?) payable {
    require ext_code.size(stor21)
    staticcall stor21.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
    staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor9)
        staticcall stor9.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor11)
        staticcall stor11.userInfo(uint256 arg1, address arg2) with:
                gas gas_remaining wei
               args stor13, this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor9)
        staticcall stor9.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not 0 / ext_call.return_data[0]:
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] / 2 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if not 0 / ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0] / 2:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / 0 / ext_call.return_data[0] / 2 / 2)
                if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not 0 / ext_call.return_data[0] / 2:
                    revert with 0, 'SafeMath: division by zero'
                return (10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] / 2 / 2)
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 2 * 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] / 2 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if not 0 / ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0] / 2:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / 0 / ext_call.return_data[0] / 2 / 2)
                if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not 0 / ext_call.return_data[0] / 2:
                    revert with 0, 'SafeMath: division by zero'
                return (10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] / 2 / 2)
            if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2 / 2)
            if 10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2:
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2 / 2)
        if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 0 / ext_call.return_data[0] / 2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not 0 / ext_call.return_data[0]:
                if not 0 / ext_call.return_data[0] / 2:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / 0 / ext_call.return_data[0] / 2 / 2)
            if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not 0 / ext_call.return_data[0] / 2:
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] / 2 / 2)
        if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 0 / ext_call.return_data[0] / 2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not 0 / ext_call.return_data[0]:
                if not 0 / ext_call.return_data[0] / 2:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / 0 / ext_call.return_data[0] / 2 / 2)
            if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not 0 / ext_call.return_data[0] / 2:
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] / 2 / 2)
        if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2:
                revert with 0, 'SafeMath: division by zero'
            return (0 / ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2 / 2)
        if 10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2:
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2 / 2)
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not 0 / ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: division by zero'
                return (0 / (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
            if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * 0 / ext_call.return_data[0] / (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not 0 / ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                    revert with 0, 'SafeMath: division by zero'
                return (0 / (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
            if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: division by zero'
            return (10^6 * 0 / ext_call.return_data[0] / (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
        if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]:
            if not (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: division by zero'
            return (0 / (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
        if 10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
    if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not 0 / ext_call.return_data[0]:
            if not (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: division by zero'
            return (0 / (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
        if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * 0 / ext_call.return_data[0] / (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
    if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not 0 / ext_call.return_data[0]:
            if not (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                revert with 0, 'SafeMath: division by zero'
            return (0 / (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
        if 10^6 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: division by zero'
        return (10^6 * 0 / ext_call.return_data[0] / (0 / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
    if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        revert with 0, 'SafeMath: addition overflow'
    if not ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]:
        if not (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
            revert with 0, 'SafeMath: division by zero'
        return (0 / (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
    if 10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] != 10^6:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
    if not (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
        revert with 0, 'SafeMath: division by zero'
    return (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] / 2) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / 2)
}

function calcPoolValueInToken() payable {
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
            staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0])
                            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]))
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
            staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0])
                            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0])
                        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]))
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
        staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
    if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
        staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0])
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
    if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
        staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0])
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
    if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor21)
    staticcall stor21.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
    staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return ((ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return ((2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]))
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return ((0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]))
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]))
    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    return (ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]))
}

function getPricePerFullShare() payable {
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
            staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                    if not totalSupply:
                                        revert with 0, 'SafeMath: division by zero'
                                    return (0 / totalSupply)
                                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] != 10^6:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / totalSupply)
                            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 2 * 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
            staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                    if not totalSupply:
                                        revert with 0, 'SafeMath: division by zero'
                                    return (0 / totalSupply)
                                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] != 10^6:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / totalSupply)
                            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
        staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return (0 / totalSupply)
        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
    if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
        staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return (0 / totalSupply)
        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
    if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
        staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
            staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(stor7.field_8))
                    staticcall address(stor7.field_8).0x70a08231 with:
                            gas gas_remaining wei
                           args stor9
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                if not totalSupply:
                                    revert with 0, 'SafeMath: division by zero'
                                return (0 / totalSupply)
                            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] != 10^6:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / totalSupply)
                        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((3 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 10^6 * 0 / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return (0 / totalSupply)
        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
    if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor21)
    staticcall stor21.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
    staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
        staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(stor7.field_8))
                staticcall address(stor7.field_8).0x70a08231 with:
                        gas gas_remaining wei
                       args stor9
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                            if not totalSupply:
                                revert with 0, 'SafeMath: division by zero'
                            return (0 / totalSupply)
                        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return (0 / totalSupply)
        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(stor7.field_8))
            staticcall address(stor7.field_8).0x70a08231 with:
                    gas gas_remaining wei
                   args stor9
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                        if not totalSupply:
                            revert with 0, 'SafeMath: division by zero'
                        return (0 / totalSupply)
                    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return (0 / totalSupply)
        if (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return ((10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(stor7.field_8))
        staticcall address(stor7.field_8).0x70a08231 with:
                gas gas_remaining wei
               args stor9
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                    if not totalSupply:
                        revert with 0, 'SafeMath: division by zero'
                    return (0 / totalSupply)
                if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
            if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((2 * 10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return (0 / totalSupply)
        if (10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return ((10^6 * 0 / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(stor7.field_8))
    staticcall address(stor7.field_8).0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(stor17)
        staticcall stor17.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(stor16)
        staticcall stor16.0x70a08231 with:
                gas gas_remaining wei
               args stor18
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 0 / ext_call.return_data[0]:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                if not totalSupply:
                    revert with 0, 'SafeMath: division by zero'
                return (0 / totalSupply)
            if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
        if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return (0 / totalSupply)
        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args stor18
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
            if not totalSupply:
                revert with 0, 'SafeMath: division by zero'
            return (0 / totalSupply)
        if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]) != 10^6:
            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * 0 / ext_call.return_data[0]) / totalSupply)
    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
        if not totalSupply:
            revert with 0, 'SafeMath: division by zero'
        return (0 / totalSupply)
    if (10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) != 10^6:
        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
    if not totalSupply:
        revert with 0, 'SafeMath: division by zero'
    return ((10^6 * ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (10^6 * ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (10^6 * ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]) / totalSupply)
}

function deposit(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    stor0++
    if not arg1:
        revert with 0, 'deposit must be greater than 0'
    if arg1 > depositLimit:
        revert with 0, 'Over deposit Limit'
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
            staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
            else:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
        else:
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 2 * 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
                staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
            else:
                if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
                staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
    else:
        if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
            staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
            else:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if arg1 + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += arg1
                                    if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += arg1
                                    emit Transfer(arg1, 0, msg.sender);
                                else:
                                    if not arg1:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * arg1 / arg1 != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
        else:
            if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
                staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
            else:
                if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
                staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if arg1 + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += arg1
                                        if arg1 + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += arg1
                                        emit Transfer(arg1, 0, msg.sender);
                                    else:
                                        if not arg1:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * arg1 / arg1 != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * arg1 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
    if stor0 + 1 != stor0:
        revert with 0, 'ReentrancyGuard: reentrant call'
}

function depositAll() payable {
    require ext_code.size(stor16)
    staticcall stor16.0x70a08231 with:
            gas gas_remaining wei
           args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    stor0++
    if not ext_call.return_data[0]:
        revert with 0, 'deposit must be greater than 0'
    if ext_call.return_data[0] > depositLimit:
        revert with 0, 'Over deposit Limit'
    require ext_code.size(stor17)
    staticcall stor17.0x70a08231 with:
            gas gas_remaining wei
           args stor9
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor11)
    staticcall stor11.userInfo(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args stor13, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor9)
    staticcall stor9.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 2 * ext_call.return_data[0]:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not 0 / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
            staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
            else:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
        else:
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 2 * 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
                staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
            else:
                if ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / 2 * 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
                staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * 0 / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
    else:
        if (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / 2 * ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if not (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
            staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
            else:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor17)
                staticcall stor17.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(stor16)
                staticcall stor16.0x70a08231 with:
                        gas gas_remaining wei
                       args stor18
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(stor7.field_8))
                        staticcall address(stor7.field_8).0x70a08231 with:
                                gas gas_remaining wei
                               args stor9
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor16)
                            staticcall stor16.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor18
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor16)
                                call stor16.0x23b872dd with:
                                     gas gas_remaining wei
                                    args msg.sender, this.address, ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not totalSupply:
                                    if not msg.sender:
                                        revert with 0, 'ERC20: mint to the zero address'
                                    if ext_call.return_data[0] + totalSupply < totalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalSupply += ext_call.return_data[0]
                                    if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                    emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                else:
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                    else:
                                        if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                        if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                            revert with 0, 'SafeMath: division by zero'
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                        emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
        else:
            if 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            require ext_code.size(stor17)
            staticcall stor17.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor16)
            staticcall stor16.0x70a08231 with:
                    gas gas_remaining wei
                   args stor18
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0]:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
                staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0]), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (3 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
            else:
                if ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(0x328a7b4d538a2b3942653a9983fda3c12c571141)
                staticcall 0x328a7b4d538a2b3942653a9983fda3c12c571141.exchangeRateStored() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                else:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(0xd528697008ac67a21818751a5e3c58c8dae54696)
                    staticcall 0xd528697008ac67a21818751a5e3c58c8dae54696.borrowBalanceStored(address arg1) with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor17)
                    staticcall stor17.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(stor16)
                    staticcall stor16.0x70a08231 with:
                            gas gas_remaining wei
                           args stor18
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                    else:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor17)
                        staticcall stor17.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor16)
                        staticcall stor16.0x70a08231 with:
                                gas gas_remaining wei
                               args stor18
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (2 * 0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / (0 / ext_call.return_data[0]) + ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) - (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                        else:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if not ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor17)
                            staticcall stor17.0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(stor7.field_8))
                            staticcall address(stor7.field_8).0x70a08231 with:
                                    gas gas_remaining wei
                                   args stor9
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                            else:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if not ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_code.size(stor17)
                                staticcall stor17.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(stor16)
                                staticcall stor16.0x70a08231 with:
                                        gas gas_remaining wei
                                       args stor18
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (0 / ext_call.return_data[0])), 0, msg.sender);
                                else:
                                    if ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if not ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_code.size(stor16)
                                    call stor16.0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, this.address, ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not totalSupply:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: mint to the zero address'
                                        if ext_call.return_data[0] + totalSupply < totalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalSupply += ext_call.return_data[0]
                                        if ext_call.return_data[0] + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(msg.sender)] += ext_call.return_data[0]
                                        emit Transfer(ext_call.return_data[0], 0, msg.sender);
                                    else:
                                        if not ext_call.return_data[0]:
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += 0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((0 / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
                                        else:
                                            if totalSupply * ext_call.return_data[0] / ext_call.return_data[0] != totalSupply:
                                                revert with 0, 32, 33, 0x65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                            if not ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: division by zero'
                                            if not msg.sender:
                                                revert with 0, 'ERC20: mint to the zero address'
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + totalSupply < totalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalSupply += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            if (totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])) + balanceOf[address(msg.sender)] < balanceOf[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(msg.sender)] += totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])
                                            emit Transfer((totalSupply * ext_call.return_data[0] / ext_call.return_data[0] + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * 2 * (ext_call.return_data[0] * ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0])), 0, msg.sender);
    if stor0 + 1 != stor0:
        revert with 0, 'ReentrancyGuard: reentrant call'
}



}
