contract main {




// =====================  Runtime code  =====================


#
#  - sub_33853b46(?)
#  - sub_76f13d57(?)
#
const sub_26a8aa76(?) = 0xf4766552d15ae4d256ad41b6cf2933482b0680dc

const sub_4591b9f6(?) = 0x4068da6c83afcfa0e13ba15a6696662335d5b75

const sub_470088f1(?) = 0xf491e7b69e4244ad4002bc14e878a34207e38c29

const sub_8d8e5122(?) = 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c

const sub_9061eaed(?) = 0xf64b636c5dfe1d3555a847341cdc449f612307d0

const sub_9220e978(?) = 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83

const sub_ed721fbe(?) = 0x49d68029688eabf473097a2fc38ef61633a3c7a


address stor0;
mapping of struct stor1;
mapping of struct stor2;

function _fallback() payable {
    revert
}

function sub_0f9c9b08(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
    staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if not arg1:
        return 0
    require arg1
    if arg1 * ext_call.return_data[32] / arg1 != ext_call.return_data[32]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 31]
    return (arg1 * ext_call.return_data[32] / 100 * 10^6)
}

function sub_5a3d0aa2(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if not arg1:
        return 0
    require arg1
    if arg1 * ext_call.return_data[32] / arg1 != ext_call.return_data[32]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 31]
    return (arg1 * ext_call.return_data[32] / 100 * 10^6)
}

function sub_7f9487d7(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if not arg1:
        return 0
    require arg1
    if arg1 * ext_call.return_data[32] / arg1 != ext_call.return_data[32]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    ext_call.return_data[101 len 31]
    return (arg1 * ext_call.return_data[32] / 100 * 10^6)
}

function sub_f29d0040(?) payable {
    require calldata.size - 4 >= 32
    if arg1 == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
        require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
        staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        return (10^18 * ext_call.return_data[32] / 100 * 10^6)
    if arg1 == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        return (10^18 * ext_call.return_data[32] / 100 * 10^6)
    if arg1 == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        return (10^18 * ext_call.return_data[32] / 100 * 10^6)
    require ext_code.size(stor0)
    staticcall stor0.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args address(arg1), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20]:
        require ext_code.size(stor0)
        staticcall stor0.factory() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if arg1 == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
        if arg1 >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
            if arg1 == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if arg1 < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if not arg1:
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if arg1 == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if arg1 >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            else:
                if not arg1:
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if arg1 == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                require ext_call.return_data[18 len 14]
                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 160
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    return 0
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6)
        else:
            if not arg1:
                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if arg1 == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if arg1 < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if not arg1:
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if arg1 == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if arg1 >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            else:
                if not arg1:
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if arg1 == arg1:
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                require ext_call.return_data[18 len 14]
                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 160
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    return 0
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6)
        if ext_call.return_data[50 len 14] <= 0:
            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
        if ext_call.return_data[18 len 14] <= 0:
            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
        if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
        require ext_call.return_data[50 len 14]
        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                gas gas_remaining wei
    else:
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                gas gas_remaining wei
               args address(arg1), 0x4068da6c83afcfa0e13ba15a6696662335d5b75
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[12 len 20]:
            require ext_code.size(stor0)
            staticcall stor0.factory() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if arg1 == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if arg1 >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                if arg1 == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if arg1 < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if not arg1:
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if arg1 == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if arg1 >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not arg1:
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if arg1 == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        return 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6)
            else:
                if not arg1:
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if arg1 == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if arg1 < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if not arg1:
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if arg1 == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if arg1 >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not arg1:
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if arg1 == arg1:
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        return 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6)
            if ext_call.return_data[50 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if ext_call.return_data[18 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
            require ext_call.return_data[50 len 14]
            require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
            staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                    gas gas_remaining wei
        else:
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(arg1), 0x49d68029688eabf473097a2fc38ef61633a3c7a
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[12 len 20]:
                return 0
            require ext_code.size(stor0)
            staticcall stor0.factory() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if arg1 == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if arg1 >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                if arg1 == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if arg1 < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if not arg1:
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if arg1 == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if arg1 >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not arg1:
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if arg1 == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        return 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6)
            else:
                if not arg1:
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if arg1 == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if arg1 < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if not arg1:
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if arg1 == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if arg1 >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, arg1), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not arg1:
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(arg1, 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if arg1 == arg1:
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        return 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6)
            if ext_call.return_data[50 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if ext_call.return_data[18 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
            require ext_call.return_data[50 len 14]
            require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
            staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                    gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
        return 0
    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
    return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6)
}

function sub_03869fcb(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    staticcall arg1.underlying() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
        require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
        staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if not 10^18 * ext_call.return_data[32] / 100 * 10^6:
            if 0 <= stor1[address(arg1)].field_0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256
            if stor1[address(arg1)].field_0 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if -stor1[address(arg1)].field_0 <= 0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256
            if 0 > -stor1[address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
        require 10^18 * ext_call.return_data[32] / 100 * 10^6
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
            if 0 <= stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256
            if stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0 + (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256
        if stor1[address(arg1)].field_0 > 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256
        if 0 > (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256
    if ext_call.return_data[12 len 20] == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if not 10^18 * ext_call.return_data[32] / 100 * 10^6:
            if 0 <= stor1[address(arg1)].field_0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256
            if stor1[address(arg1)].field_0 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if -stor1[address(arg1)].field_0 <= 0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256
            if 0 > -stor1[address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
        require 10^18 * ext_call.return_data[32] / 100 * 10^6
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
            if 0 <= stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256
            if stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0 + (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256
        if stor1[address(arg1)].field_0 > 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256
        if 0 > (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256
    if ext_call.return_data[12 len 20] == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if not 10^18 * ext_call.return_data[32] / 100 * 10^6:
            if 0 <= stor1[address(arg1)].field_0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256
            if stor1[address(arg1)].field_0 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if -stor1[address(arg1)].field_0 <= 0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256
            if 0 > -stor1[address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
        require 10^18 * ext_call.return_data[32] / 100 * 10^6
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
            if 0 <= stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256
            if stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0 + (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256
        if stor1[address(arg1)].field_0 > 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256
        if 0 > (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256
    require ext_code.size(stor0)
    staticcall stor0.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20]:
        require ext_code.size(stor0)
        staticcall stor0.factory() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
        if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            else:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                require ext_call.return_data[18 len 14]
                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 160
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    if 0 <= stor1[address(arg1)].field_0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                    if 0 > -stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                    if 0 <= stor1[address(arg1)].field_0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                    if 0 > -stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                    if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256
                if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return 0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256
                if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256
        else:
            if not address(ext_call.return_data[0]):
                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            else:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                require ext_call.return_data[18 len 14]
                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 160
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    if 0 <= stor1[address(arg1)].field_0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                    if 0 > -stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                    if 0 <= stor1[address(arg1)].field_0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                    if 0 > -stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                    if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256
                if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return 0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256
                if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256
        if ext_call.return_data[50 len 14] <= 0:
            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
        if ext_call.return_data[18 len 14] <= 0:
            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
        if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
        require ext_call.return_data[50 len 14]
        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                gas gas_remaining wei
    else:
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                gas gas_remaining wei
               args address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[12 len 20]:
            require ext_code.size(stor0)
            staticcall stor0.factory() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256
            else:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256
            if ext_call.return_data[50 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if ext_call.return_data[18 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
            require ext_call.return_data[50 len 14]
            require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
            staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                    gas gas_remaining wei
        else:
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[12 len 20]:
                if 0 <= stor1[address(arg1)].field_0:
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                if stor1[address(arg1)].field_0 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -stor1[address(arg1)].field_0 <= 0:
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                if 0 > -stor1[address(arg1)].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
            require ext_code.size(stor0)
            staticcall stor0.factory() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256
            else:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   block.timestamp - stor1[address(arg1)].field_256
                        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256
                    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256
            if ext_call.return_data[50 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if ext_call.return_data[18 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
            require ext_call.return_data[50 len 14]
            require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
            staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                    gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
        if 0 <= stor1[address(arg1)].field_0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
        if stor1[address(arg1)].field_0 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        if -stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
        if 0 > -stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
        if 0 <= stor1[address(arg1)].field_0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
        if stor1[address(arg1)].field_0 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        if -stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 0, block.timestamp - stor1[address(arg1)].field_256
        if 0 > -stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256
    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6
    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256
        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
               10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256
    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
        revert with 0, 'SafeMath: subtraction overflow'
    if (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return 0, 
               10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256
    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
        revert with 0, 'SafeMath: subtraction overflow'
    if stor1[address(arg1)].field_256 > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow'
    return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
           10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
           block.timestamp - stor1[address(arg1)].field_256
}

function sub_860e3f64(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    staticcall arg1.underlying() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
        require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
        staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if not 10^18 * ext_call.return_data[32] / 100 * 10^6:
            if 0 <= stor1[address(arg1)].field_0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
            if stor1[address(arg1)].field_0 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if -stor1[address(arg1)].field_0 <= 0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
            if 0 > -stor1[address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
        require 10^18 * ext_call.return_data[32] / 100 * 10^6
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
            if 0 <= stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256,
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
            if stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0 + (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        if stor1[address(arg1)].field_0 > 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        if 0 > (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256,
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
    if ext_call.return_data[12 len 20] == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if not 10^18 * ext_call.return_data[32] / 100 * 10^6:
            if 0 <= stor1[address(arg1)].field_0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
            if stor1[address(arg1)].field_0 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if -stor1[address(arg1)].field_0 <= 0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
            if 0 > -stor1[address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
        require 10^18 * ext_call.return_data[32] / 100 * 10^6
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
            if 0 <= stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256,
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
            if stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0 + (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        if stor1[address(arg1)].field_0 > 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        if 0 > (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256,
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
    if ext_call.return_data[12 len 20] == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if not 10^18 * ext_call.return_data[32] / 100 * 10^6:
            if 0 <= stor1[address(arg1)].field_0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
            if stor1[address(arg1)].field_0 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if -stor1[address(arg1)].field_0 <= 0:
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
            if 0 > -stor1[address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
        require 10^18 * ext_call.return_data[32] / 100 * 10^6
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        ext_call.return_data[101 len 31]
        if 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
            if 0 <= stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return 0, 
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256,
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
            if stor1[address(arg1)].field_0 - (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stor1[address(arg1)].field_0 + (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        if stor1[address(arg1)].field_0 > 10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        if 0 > (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return (10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256,
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               10^18 * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
    require ext_code.size(stor0)
    staticcall stor0.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20]:
        require ext_code.size(stor0)
        staticcall stor0.factory() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
        if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            else:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                require ext_call.return_data[18 len 14]
                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 160
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    if 0 <= stor1[address(arg1)].field_0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    if stor1[address(arg1)].field_0 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    if 0 > -stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                    if 0 <= stor1[address(arg1)].field_0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    if stor1[address(arg1)].field_0 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    if 0 > -stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                    if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return 0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256,
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        else:
            if not address(ext_call.return_data[0]):
                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            else:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                        gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                require ext_call.return_data[18 len 14]
                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 160
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    if 0 <= stor1[address(arg1)].field_0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    if stor1[address(arg1)].field_0 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    if 0 > -stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                    if 0 <= stor1[address(arg1)].field_0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    if stor1[address(arg1)].field_0 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    if 0 > -stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                    if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return 0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       block.timestamp - stor1[address(arg1)].field_256,
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                       10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        if ext_call.return_data[50 len 14] <= 0:
            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
        if ext_call.return_data[18 len 14] <= 0:
            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
        if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
        require ext_call.return_data[50 len 14]
        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                gas gas_remaining wei
    else:
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                gas gas_remaining wei
               args address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[12 len 20]:
            require ext_code.size(stor0)
            staticcall stor0.factory() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   block.timestamp - stor1[address(arg1)].field_256,
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
            else:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   block.timestamp - stor1[address(arg1)].field_256,
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
            if ext_call.return_data[50 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if ext_call.return_data[18 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
            require ext_call.return_data[50 len 14]
            require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
            staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                    gas gas_remaining wei
        else:
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[12 len 20]:
                if 0 <= stor1[address(arg1)].field_0:
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                if stor1[address(arg1)].field_0 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -stor1[address(arg1)].field_0 <= 0:
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                if 0 > -stor1[address(arg1)].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if stor1[address(arg1)].field_256 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
            require ext_code.size(stor0)
            staticcall stor0.factory() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
            if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   block.timestamp - stor1[address(arg1)].field_256,
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
            else:
                if not address(ext_call.return_data[0]):
                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                else:
                    if not address(ext_call.return_data[0]):
                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                            gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                    if ext_call.return_data[18 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if ext_call.return_data[50 len 14] <= 0:
                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
                    require ext_call.return_data[18 len 14]
                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                        if 0 <= stor1[address(arg1)].field_0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if stor1[address(arg1)].field_0 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -stor1[address(arg1)].field_0 <= 0:
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                        if 0 > -stor1[address(arg1)].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
                        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
                            if stor1[address(arg1)].field_256 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            return 0, 
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   block.timestamp - stor1[address(arg1)].field_256,
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                                   10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
                        if stor1[address(arg1)].field_256 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        return 0, 
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               block.timestamp - stor1[address(arg1)].field_256,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                               10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
                    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if stor1[address(arg1)].field_256 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           block.timestamp - stor1[address(arg1)].field_256,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                           10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
            if ext_call.return_data[50 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if ext_call.return_data[18 len 14] <= 0:
                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[576 len 30]
            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[575 len 31]
            require ext_call.return_data[50 len 14]
            require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
            staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                    gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
        if 0 <= stor1[address(arg1)].field_0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
        if stor1[address(arg1)].field_0 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        if -stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
        if 0 > -stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
        if 0 <= stor1[address(arg1)].field_0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
        if stor1[address(arg1)].field_0 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        if -stor1[address(arg1)].field_0 <= 0:
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
        if 0 > -stor1[address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return -stor1[address(arg1)].field_0, 0, block.timestamp - stor1[address(arg1)].field_256, 0, 0
    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6
    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 != ext_call.return_data[0] / 10^10:
        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6 <= stor1[address(arg1)].field_0:
        if 0 <= stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6):
            if stor1[address(arg1)].field_256 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            return 0, 
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   block.timestamp - stor1[address(arg1)].field_256,
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
                   10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
        if stor1[address(arg1)].field_0 - (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return -stor1[address(arg1)].field_0 + (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6), 
               10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256,
               10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
    if stor1[address(arg1)].field_0 > 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6:
        revert with 0, 'SafeMath: subtraction overflow'
    if (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0 <= 0:
        if stor1[address(arg1)].field_256 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        return 0, 
               10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               block.timestamp - stor1[address(arg1)].field_256,
               10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
               10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
    if 0 > (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0:
        revert with 0, 'SafeMath: subtraction overflow'
    if stor1[address(arg1)].field_256 > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow'
    return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6) - stor1[address(arg1)].field_0, 
           10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
           block.timestamp - stor1[address(arg1)].field_256,
           10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6,
           10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 * ext_call.return_data[0] / 10^10 / 10^6
}

function sub_43360a69(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.strategy() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0xffa222fe with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).yieldToken() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
        require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
        staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 160
        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
        if not ext_call.return_data[0]:
            require ext_code.size(arg1)
            staticcall arg1.0x4c7198f4 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).compoundFee() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0] / 10^10:
                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(arg1)
                    staticcall arg1.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] / 10^6 <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if ext_call.return_data[0] / 10^6:
                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                            return 0, 
                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                   stor2[address(arg1)].field_256
                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                            if stor2[address(arg1)].field_256 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            if stor2[address(arg1)].field_256:
                                if stor2[address(arg1)].field_0 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if block.timestamp - stor2[address(arg1)].field_0:
                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                           stor2[address(arg1)].field_256
                        else:
                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                if stor2[address(arg1)].field_256 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if stor2[address(arg1)].field_256:
                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if block.timestamp - stor2[address(arg1)].field_0:
                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                               stor2[address(arg1)].field_256
                else:
                    if 0 / ext_call.return_data[0] / 10^10:
                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(arg1)
                        staticcall arg1.0x18160ddd with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] / 10^6 <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        if ext_call.return_data[0] / 10^6:
                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                return 0, 
                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                       stor2[address(arg1)].field_256
                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                if stor2[address(arg1)].field_256 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if stor2[address(arg1)].field_256:
                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if block.timestamp - stor2[address(arg1)].field_0:
                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                               stor2[address(arg1)].field_256
                            else:
                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if stor2[address(arg1)].field_256 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if block.timestamp - stor2[address(arg1)].field_0:
                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                   stor2[address(arg1)].field_256
        else:
            if ext_call.return_data[0]:
                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                require ext_code.size(arg1)
                staticcall arg1.0x4c7198f4 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                        if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(arg1)
                        staticcall arg1.0x18160ddd with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] / 10^6 <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        if ext_call.return_data[0] / 10^6:
                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                return 0, 
                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                       stor2[address(arg1)].field_256
                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                if stor2[address(arg1)].field_256 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if stor2[address(arg1)].field_256:
                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if block.timestamp - stor2[address(arg1)].field_0:
                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                               stor2[address(arg1)].field_256
                            else:
                                if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                    if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if stor2[address(arg1)].field_256 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if block.timestamp - stor2[address(arg1)].field_0:
                                            return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                   stor2[address(arg1)].field_256
                    else:
                        if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] / 10^6:
                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                    return 0, 
                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                           stor2[address(arg1)].field_256
                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                    if stor2[address(arg1)].field_256 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if block.timestamp - stor2[address(arg1)].field_0:
                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                   stor2[address(arg1)].field_256
                                else:
                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if stor2[address(arg1)].field_256 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if stor2[address(arg1)].field_256:
                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                       stor2[address(arg1)].field_256
    else:
        if ext_call.return_data[12 len 20] == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
            require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
            staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 160
            if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
            if not ext_call.return_data[0]:
                require ext_code.size(arg1)
                staticcall arg1.0x4c7198f4 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0] / 10^10:
                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(arg1)
                        staticcall arg1.0x18160ddd with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] / 10^6 <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        if ext_call.return_data[0] / 10^6:
                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                return 0, 
                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                       stor2[address(arg1)].field_256
                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                if stor2[address(arg1)].field_256 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if stor2[address(arg1)].field_256:
                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if block.timestamp - stor2[address(arg1)].field_0:
                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                               stor2[address(arg1)].field_256
                            else:
                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if stor2[address(arg1)].field_256 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if block.timestamp - stor2[address(arg1)].field_0:
                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                   stor2[address(arg1)].field_256
                    else:
                        if 0 / ext_call.return_data[0] / 10^10:
                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] / 10^6:
                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                    return 0, 
                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                           stor2[address(arg1)].field_256
                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                    if stor2[address(arg1)].field_256 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if block.timestamp - stor2[address(arg1)].field_0:
                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                   stor2[address(arg1)].field_256
                                else:
                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if stor2[address(arg1)].field_256 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if stor2[address(arg1)].field_256:
                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                       stor2[address(arg1)].field_256
            else:
                if ext_call.return_data[0]:
                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4c7198f4 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                            if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] / 10^6:
                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                    return 0, 
                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                           stor2[address(arg1)].field_256
                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                    if stor2[address(arg1)].field_256 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if block.timestamp - stor2[address(arg1)].field_0:
                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                   stor2[address(arg1)].field_256
                                else:
                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if stor2[address(arg1)].field_256 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if stor2[address(arg1)].field_256:
                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                       stor2[address(arg1)].field_256
                        else:
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] / 10^6:
                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                        return 0, 
                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                               stor2[address(arg1)].field_256
                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_256 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if stor2[address(arg1)].field_256:
                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                       stor2[address(arg1)].field_256
                                    else:
                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if stor2[address(arg1)].field_256 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if stor2[address(arg1)].field_256:
                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                           stor2[address(arg1)].field_256
        else:
            if ext_call.return_data[12 len 20] == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 160
                if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if not ext_call.return_data[0]:
                    require ext_code.size(arg1)
                    staticcall arg1.0x4c7198f4 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if ext_call.return_data[0]:
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0] / 10^10:
                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            if ext_call.return_data[0] / 10^6:
                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                    return 0, 
                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                           stor2[address(arg1)].field_256
                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                    if stor2[address(arg1)].field_256 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if block.timestamp - stor2[address(arg1)].field_0:
                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                   stor2[address(arg1)].field_256
                                else:
                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if stor2[address(arg1)].field_256 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if stor2[address(arg1)].field_256:
                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                       stor2[address(arg1)].field_256
                        else:
                            if 0 / ext_call.return_data[0] / 10^10:
                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] / 10^6:
                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                        return 0, 
                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                               stor2[address(arg1)].field_256
                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_256 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if stor2[address(arg1)].field_256:
                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                       stor2[address(arg1)].field_256
                                    else:
                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if stor2[address(arg1)].field_256 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if stor2[address(arg1)].field_256:
                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                           stor2[address(arg1)].field_256
                else:
                    if ext_call.return_data[0]:
                        if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                        require ext_code.size(arg1)
                        staticcall arg1.0x4c7198f4 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        if ext_call.return_data[0]:
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0] / 10^6:
                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                        return 0, 
                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                               stor2[address(arg1)].field_256
                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                        if stor2[address(arg1)].field_256 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if stor2[address(arg1)].field_256:
                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                       stor2[address(arg1)].field_256
                                    else:
                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if stor2[address(arg1)].field_256 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if stor2[address(arg1)].field_256:
                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                           stor2[address(arg1)].field_256
                            else:
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0] / 10^6:
                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                            return 0, 
                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                   stor2[address(arg1)].field_256
                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                            if stor2[address(arg1)].field_256 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if stor2[address(arg1)].field_256:
                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                           stor2[address(arg1)].field_256
                                        else:
                                            if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if stor2[address(arg1)].field_256 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if stor2[address(arg1)].field_256:
                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                        return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                               stor2[address(arg1)].field_256
            else:
                require ext_code.size(stor0)
                staticcall stor0.factory() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[12 len 20]:
                    require ext_code.size(stor0)
                    staticcall stor0.factory() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                    if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                        if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            if not address(ext_call.return_data[0]):
                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                        if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                    gas gas_remaining wei
                        else:
                            if not address(ext_call.return_data[0]):
                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                    gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            if ext_call.return_data[18 len 14] <= 0:
                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                            if ext_call.return_data[50 len 14] <= 0:
                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                            if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                            if ext_call.return_data[18 len 14]:
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0]:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] / 10^6:
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                        return 0, 
                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                               stor2[address(arg1)].field_256
                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                        if stor2[address(arg1)].field_256 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                    else:
                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                            else:
                                                if 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                    else:
                                        if ext_call.return_data[0]:
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                        else:
                                            if ext_call.return_data[0]:
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                        else:
                            if ext_call.return_data[50 len 14] <= 0:
                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                            if ext_call.return_data[18 len 14] <= 0:
                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                            if ext_call.return_data[50 len 14]:
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0]:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] / 10^6:
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                        return 0, 
                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                               stor2[address(arg1)].field_256
                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                        if stor2[address(arg1)].field_256 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                    else:
                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                            else:
                                                if 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                    else:
                                        if ext_call.return_data[0]:
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                        else:
                                            if ext_call.return_data[0]:
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                    else:
                        if not address(ext_call.return_data[0]):
                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                        if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            if not address(ext_call.return_data[0]):
                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                        if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                    gas gas_remaining wei
                        else:
                            if not address(ext_call.return_data[0]):
                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                    gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                            if ext_call.return_data[18 len 14] <= 0:
                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                            if ext_call.return_data[50 len 14] <= 0:
                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                            if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                            if ext_call.return_data[18 len 14]:
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0]:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] / 10^6:
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                        return 0, 
                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                               stor2[address(arg1)].field_256
                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                        if stor2[address(arg1)].field_256 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                    else:
                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                            else:
                                                if 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                    else:
                                        if ext_call.return_data[0]:
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                        else:
                                            if ext_call.return_data[0]:
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                        else:
                            if ext_call.return_data[50 len 14] <= 0:
                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                            if ext_call.return_data[18 len 14] <= 0:
                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                            if ext_call.return_data[50 len 14]:
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0]:
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] / 10^6:
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                        return 0, 
                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                               stor2[address(arg1)].field_256
                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                        if stor2[address(arg1)].field_256 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                    else:
                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                            else:
                                                if 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                    else:
                                        if ext_call.return_data[0]:
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                else:
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                        else:
                                            if ext_call.return_data[0]:
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                else:
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[12 len 20]:
                        require ext_code.size(stor0)
                        staticcall stor0.factory() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                        if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                        gas gas_remaining wei
                            else:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                        gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                if ext_call.return_data[18 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if ext_call.return_data[50 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                if ext_call.return_data[18 len 14]:
                                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 160
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                        else:
                                            if ext_call.return_data[0]:
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                            else:
                                                if ext_call.return_data[0]:
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                            else:
                                if ext_call.return_data[50 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if ext_call.return_data[18 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                if ext_call.return_data[50 len 14]:
                                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 160
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                        else:
                                            if ext_call.return_data[0]:
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                            else:
                                                if ext_call.return_data[0]:
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                        else:
                            if not address(ext_call.return_data[0]):
                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                        gas gas_remaining wei
                            else:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                        gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                if ext_call.return_data[18 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if ext_call.return_data[50 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                if ext_call.return_data[18 len 14]:
                                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 160
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                        else:
                                            if ext_call.return_data[0]:
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                            else:
                                                if ext_call.return_data[0]:
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                            else:
                                if ext_call.return_data[50 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if ext_call.return_data[18 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                if ext_call.return_data[50 len 14]:
                                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 160
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0]:
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0] / 10^6:
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                            return 0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                        else:
                                                            if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                else:
                                                    if 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                        else:
                                            if ext_call.return_data[0]:
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                            else:
                                                if ext_call.return_data[0]:
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                    else:
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[12 len 20]:
                            if not ext_call.return_data[0]:
                                require ext_code.size(arg1)
                                staticcall arg1.0x4c7198f4 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if ext_call.return_data[0]:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / ext_call.return_data[0] / 10^10:
                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if ext_call.return_data[0] / 10^6:
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                return 0, 
                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                       stor2[address(arg1)].field_256
                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                if stor2[address(arg1)].field_256 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if stor2[address(arg1)].field_256:
                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                               stor2[address(arg1)].field_256
                                            else:
                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                                    if stor2[address(arg1)].field_256 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if stor2[address(arg1)].field_256:
                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                    else:
                                        if 0 / ext_call.return_data[0] / 10^10:
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^6:
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                    return 0, 
                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                           stor2[address(arg1)].field_256
                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                    if stor2[address(arg1)].field_256 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if stor2[address(arg1)].field_256:
                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                else:
                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                                        if stor2[address(arg1)].field_256 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                            else:
                                if ext_call.return_data[0]:
                                    if 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x4c7198f4 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if ext_call.return_data[0]:
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if ext_call.return_data[0] / 10^6:
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                    return 0, 
                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                           stor2[address(arg1)].field_256
                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                    if stor2[address(arg1)].field_256 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if stor2[address(arg1)].field_256:
                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                   stor2[address(arg1)].field_256
                                                else:
                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                                        if stor2[address(arg1)].field_256 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                        else:
                                            if 0 / ext_call.return_data[0] / 10^10:
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0] / 10^6:
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                        return 0, 
                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                               stor2[address(arg1)].field_256
                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                        if stor2[address(arg1)].field_256 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if stor2[address(arg1)].field_256:
                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                    else:
                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                        else:
                            require ext_code.size(stor0)
                            staticcall stor0.factory() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                            gas gas_remaining wei
                                else:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                            gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    if ext_call.return_data[18 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if ext_call.return_data[50 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                    if ext_call.return_data[18 len 14]:
                                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                            else:
                                                if ext_call.return_data[0]:
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                        else:
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                else:
                                                    if ext_call.return_data[0]:
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0]:
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                            else:
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                            gas gas_remaining wei
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    require return_data.size >= 32
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    require ext_code.size(arg1)
                                                                    staticcall arg1.0x18160ddd with:
                                                                            gas gas_remaining wei
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    require return_data.size >= 32
                                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if ext_call.return_data[0] / 10^6:
                                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                            return 0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                                        else:
                                                                            if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                                if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if stor2[address(arg1)].field_256:
                                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                        revert with 0, 'SafeMath: division by zero'
                                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                                        return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                               stor2[address(arg1)].field_256
                                else:
                                    if ext_call.return_data[50 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if ext_call.return_data[18 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                    if ext_call.return_data[50 len 14]:
                                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                            else:
                                                if ext_call.return_data[0]:
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                        else:
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                else:
                                                    if ext_call.return_data[0]:
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0]:
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                            else:
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                            gas gas_remaining wei
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    require return_data.size >= 32
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    require ext_code.size(arg1)
                                                                    staticcall arg1.0x18160ddd with:
                                                                            gas gas_remaining wei
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    require return_data.size >= 32
                                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if ext_call.return_data[0] / 10^6:
                                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                            return 0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                                        else:
                                                                            if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                                if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if stor2[address(arg1)].field_256:
                                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                        revert with 0, 'SafeMath: division by zero'
                                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                                        return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                               stor2[address(arg1)].field_256
                            else:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                            gas gas_remaining wei
                                else:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                            gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                    if ext_call.return_data[18 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if ext_call.return_data[50 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                    if ext_call.return_data[18 len 14]:
                                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                            else:
                                                if ext_call.return_data[0]:
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                        else:
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                else:
                                                    if ext_call.return_data[0]:
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0]:
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                            else:
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                            gas gas_remaining wei
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    require return_data.size >= 32
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    require ext_code.size(arg1)
                                                                    staticcall arg1.0x18160ddd with:
                                                                            gas gas_remaining wei
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    require return_data.size >= 32
                                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if ext_call.return_data[0] / 10^6:
                                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                            return 0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                                        else:
                                                                            if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                                if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if stor2[address(arg1)].field_256:
                                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                        revert with 0, 'SafeMath: division by zero'
                                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                                        return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                               stor2[address(arg1)].field_256
                                else:
                                    if ext_call.return_data[50 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if ext_call.return_data[18 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                    if ext_call.return_data[50 len 14]:
                                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if ext_call.return_data[0]:
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0] / 10^6:
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                return 0, 
                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                       stor2[address(arg1)].field_256
                                                            if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                        return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                            else:
                                                                if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                    else:
                                                        if 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                            else:
                                                if ext_call.return_data[0]:
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                        else:
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if ext_call.return_data[0]:
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if ext_call.return_data[0] / 10^6:
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                    return 0, 
                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                           stor2[address(arg1)].field_256
                                                                if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                    if stor2[address(arg1)].field_256 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_0 > block.timestamp:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if block.timestamp - stor2[address(arg1)].field_0:
                                                                            return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                   ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                else:
                                                                    if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                        else:
                                                            if 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                else:
                                                    if ext_call.return_data[0]:
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if ext_call.return_data[0]:
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                if ext_call.return_data[0] / 10^6:
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                        return 0, 
                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                               stor2[address(arg1)].field_256
                                                                    if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                        if stor2[address(arg1)].field_256 <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        if stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                                            if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if block.timestamp - stor2[address(arg1)].field_0:
                                                                                return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                       ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                       stor2[address(arg1)].field_256
                                                                    else:
                                                                        if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                            else:
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                            gas gas_remaining wei
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    require return_data.size >= 32
                                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    require ext_code.size(arg1)
                                                                    staticcall arg1.0x18160ddd with:
                                                                            gas gas_remaining wei
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    require return_data.size >= 32
                                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    if ext_call.return_data[0] / 10^6:
                                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6 < stor2[address(arg1)].field_256:
                                                                            return 0, 
                                                                                   ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                   stor2[address(arg1)].field_256
                                                                        if stor2[address(arg1)].field_256 > ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6:
                                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                                        if not (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                            if stor2[address(arg1)].field_256 <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            if stor2[address(arg1)].field_256:
                                                                                if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                                if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if block.timestamp - stor2[address(arg1)].field_0:
                                                                                    return 0 / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                           ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                           stor2[address(arg1)].field_256
                                                                        else:
                                                                            if (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256:
                                                                                if (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / (ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - stor2[address(arg1)].field_256 != 10^18:
                                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                                if stor2[address(arg1)].field_256 <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                if stor2[address(arg1)].field_256:
                                                                                    if stor2[address(arg1)].field_0 > block.timestamp:
                                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                                    if block.timestamp - stor2[address(arg1)].field_0 <= 0:
                                                                                        revert with 0, 'SafeMath: division by zero'
                                                                                    if block.timestamp - stor2[address(arg1)].field_0:
                                                                                        return (10^18 * ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6) - (10^18 * stor2[address(arg1)].field_256) / stor2[address(arg1)].field_256 / block.timestamp - stor2[address(arg1)].field_0, 
                                                                                               ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6,
                                                                                               stor2[address(arg1)].field_256
    revert
}

function sub_877daa59(?) payable {
    require calldata.size - 4 >= 32
    if not stor2[address(arg1)].field_0:
        require ext_code.size(arg1)
        staticcall arg1.strategy() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0xffa222fe with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).yieldToken() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[12 len 20] == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
            require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
            staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 160
            if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
            if not ext_call.return_data[0]:
                require ext_code.size(arg1)
                staticcall arg1.0x4c7198f4 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).compoundFee() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 0 / ext_call.return_data[0] / 10^10:
                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(arg1)
                    staticcall arg1.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] / 10^6 <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0] / 10^6
                    stor2[address(arg1)].field_0 = block.timestamp
                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                else:
                    require 0 / ext_call.return_data[0] / 10^10
                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(arg1)
                    staticcall arg1.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] / 10^6 <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0] / 10^6
                    stor2[address(arg1)].field_0 = block.timestamp
                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
            else:
                require ext_call.return_data[0]
                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                require ext_code.size(arg1)
                staticcall arg1.0x4c7198f4 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).compoundFee() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                    if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(arg1)
                    staticcall arg1.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] / 10^6 <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0] / 10^6
                    stor2[address(arg1)].field_0 = block.timestamp
                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                else:
                    require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    require ext_code.size(arg1)
                    staticcall arg1.0x18160ddd with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] / 10^6 <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0] / 10^6
                    stor2[address(arg1)].field_0 = block.timestamp
                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
        else:
            if ext_call.return_data[12 len 20] == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 160
                if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                if not ext_call.return_data[0]:
                    require ext_code.size(arg1)
                    staticcall arg1.0x4c7198f4 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 0 / ext_call.return_data[0] / 10^10:
                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(arg1)
                        staticcall arg1.0x18160ddd with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] / 10^6 <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0] / 10^6
                        stor2[address(arg1)].field_0 = block.timestamp
                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                    else:
                        require 0 / ext_call.return_data[0] / 10^10
                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(arg1)
                        staticcall arg1.0x18160ddd with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] / 10^6 <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0] / 10^6
                        stor2[address(arg1)].field_0 = block.timestamp
                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                else:
                    require ext_call.return_data[0]
                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    require ext_code.size(arg1)
                    staticcall arg1.0x4c7198f4 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                        if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(arg1)
                        staticcall arg1.0x18160ddd with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] / 10^6 <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0] / 10^6
                        stor2[address(arg1)].field_0 = block.timestamp
                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                    else:
                        require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                        if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                        if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        require ext_code.size(arg1)
                        staticcall arg1.0x18160ddd with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] / 10^6 <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0] / 10^6
                        stor2[address(arg1)].field_0 = block.timestamp
                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
            else:
                if ext_call.return_data[12 len 20] == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                    require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                    staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not ext_call.return_data[0]:
                        require ext_code.size(arg1)
                        staticcall arg1.0x4c7198f4 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0] / 10^10:
                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0] / 10^6
                            stor2[address(arg1)].field_0 = block.timestamp
                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                        else:
                            require 0 / ext_call.return_data[0] / 10^10
                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0] / 10^6
                            stor2[address(arg1)].field_0 = block.timestamp
                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                    else:
                        require ext_call.return_data[0]
                        if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                        require ext_code.size(arg1)
                        staticcall arg1.0x4c7198f4 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                            if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0] / 10^6
                            stor2[address(arg1)].field_0 = block.timestamp
                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                        else:
                            require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0] / 10^6
                            stor2[address(arg1)].field_0 = block.timestamp
                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                else:
                    require ext_code.size(stor0)
                    staticcall stor0.factory() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[12 len 20]:
                        require ext_code.size(stor0)
                        staticcall stor0.factory() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                        if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                        gas gas_remaining wei
                            else:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                        gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                if ext_call.return_data[18 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if ext_call.return_data[50 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                require ext_call.return_data[18 len 14]
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0]
                                        if 0 / ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x4c7198f4 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / ext_call.return_data[0] / 10^10:
                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_0 = block.timestamp
                                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 0 / ext_call.return_data[0] / 10^10
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_0 = block.timestamp
                                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                            else:
                                if ext_call.return_data[50 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if ext_call.return_data[18 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                require ext_call.return_data[50 len 14]
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0]
                                        if 0 / ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x4c7198f4 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / ext_call.return_data[0] / 10^10:
                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_0 = block.timestamp
                                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 0 / ext_call.return_data[0] / 10^10
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_0 = block.timestamp
                                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                        else:
                            if not address(ext_call.return_data[0]):
                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                            if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                        gas gas_remaining wei
                            else:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                        gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 96
                            if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                if ext_call.return_data[18 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if ext_call.return_data[50 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                require ext_call.return_data[18 len 14]
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0]
                                        if 0 / ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x4c7198f4 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / ext_call.return_data[0] / 10^10:
                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_0 = block.timestamp
                                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 0 / ext_call.return_data[0] / 10^10
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_0 = block.timestamp
                                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                            else:
                                if ext_call.return_data[50 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if ext_call.return_data[18 len 14] <= 0:
                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                require ext_call.return_data[50 len 14]
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    if ext_call.return_data[0]:
                                        require ext_call.return_data[0]
                                        if 0 / ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x4c7198f4 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / ext_call.return_data[0] / 10^10:
                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_0 = block.timestamp
                                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 0 / ext_call.return_data[0] / 10^10
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_0 = block.timestamp
                                        stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if not ext_call.return_data[0]:
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                    else:
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[12 len 20]:
                            require ext_code.size(stor0)
                            staticcall stor0.factory() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                            if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                            gas gas_remaining wei
                                else:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                            gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    if ext_call.return_data[18 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if ext_call.return_data[50 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                    require ext_call.return_data[18 len 14]
                                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 160
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0]
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    if ext_call.return_data[50 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if ext_call.return_data[18 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                    require ext_call.return_data[50 len 14]
                                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 160
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0]
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                            else:
                                if not address(ext_call.return_data[0]):
                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                            gas gas_remaining wei
                                else:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                            gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                    if ext_call.return_data[18 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if ext_call.return_data[50 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                    require ext_call.return_data[18 len 14]
                                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 160
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0]
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    if ext_call.return_data[50 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if ext_call.return_data[18 len 14] <= 0:
                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                    if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                    require ext_call.return_data[50 len 14]
                                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 160
                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0]
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_0 = block.timestamp
                                            stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if not ext_call.return_data[0]:
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                        else:
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[12 len 20]:
                                if ext_call.return_data[0]:
                                    require ext_call.return_data[0]
                                    if 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                require ext_code.size(arg1)
                                staticcall arg1.0x4c7198f4 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0] / 10^10:
                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_0 = block.timestamp
                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                else:
                                    require 0 / ext_call.return_data[0] / 10^10
                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_0 = block.timestamp
                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                            else:
                                require ext_code.size(stor0)
                                staticcall stor0.factory() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                    if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                        staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                gas gas_remaining wei
                                    else:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                        staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                        require ext_call.return_data[18 len 14]
                                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                        require ext_call.return_data[50 len 14]
                                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                        require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                        staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                gas gas_remaining wei
                                    else:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                        staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                        require ext_call.return_data[18 len 14]
                                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                        require ext_call.return_data[50 len 14]
                                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_0 = block.timestamp
                                                stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_0 = block.timestamp
                                                    stor2[address(arg1)].field_256 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
    else:
        if stor2[address(arg1)].field_0 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not stor2[address(arg1)].field_512:
            if block.timestamp - stor2[address(arg1)].field_0 > 84 * 3600:
                require ext_code.size(arg1)
                staticcall arg1.strategy() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0xffa222fe with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).yieldToken() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[12 len 20] == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                    require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                    staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 160
                    if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                    if not ext_call.return_data[0]:
                        require ext_code.size(arg1)
                        staticcall arg1.0x4c7198f4 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not 0 / ext_call.return_data[0] / 10^10:
                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0] / 10^6
                            stor2[address(arg1)].field_512 = block.timestamp
                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                        else:
                            require 0 / ext_call.return_data[0] / 10^10
                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0] / 10^6
                            stor2[address(arg1)].field_512 = block.timestamp
                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                    else:
                        require ext_call.return_data[0]
                        if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                        require ext_code.size(arg1)
                        staticcall arg1.0x4c7198f4 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                            if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0] / 10^6
                            stor2[address(arg1)].field_512 = block.timestamp
                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                        else:
                            require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            require ext_code.size(arg1)
                            staticcall arg1.0x18160ddd with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] / 10^6 <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0] / 10^6
                            stor2[address(arg1)].field_512 = block.timestamp
                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                else:
                    if ext_call.return_data[12 len 20] == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                        require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                        staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 160
                        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                        if not ext_call.return_data[0]:
                            require ext_code.size(arg1)
                            staticcall arg1.0x4c7198f4 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0] / 10^10:
                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0] / 10^6
                                stor2[address(arg1)].field_512 = block.timestamp
                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                            else:
                                require 0 / ext_call.return_data[0] / 10^10
                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0] / 10^6
                                stor2[address(arg1)].field_512 = block.timestamp
                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            require ext_code.size(arg1)
                            staticcall arg1.0x4c7198f4 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0] / 10^6
                                stor2[address(arg1)].field_512 = block.timestamp
                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                            else:
                                require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0] / 10^6
                                stor2[address(arg1)].field_512 = block.timestamp
                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                    else:
                        if ext_call.return_data[12 len 20] == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                            require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                            staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 160
                            if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            if not ext_call.return_data[0]:
                                require ext_code.size(arg1)
                                staticcall arg1.0x4c7198f4 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0] / 10^10:
                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_512 = block.timestamp
                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                else:
                                    require 0 / ext_call.return_data[0] / 10^10
                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_512 = block.timestamp
                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                require ext_code.size(arg1)
                                staticcall arg1.0x4c7198f4 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_512 = block.timestamp
                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                else:
                                    require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_512 = block.timestamp
                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                        else:
                            require ext_code.size(stor0)
                            staticcall stor0.factory() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[12 len 20]:
                                require ext_code.size(stor0)
                                staticcall stor0.factory() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                    if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                        staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                gas gas_remaining wei
                                    else:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                        staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                        require ext_call.return_data[18 len 14]
                                        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                        require ext_call.return_data[50 len 14]
                                        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    if not address(ext_call.return_data[0]):
                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                    if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                        staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                gas gas_remaining wei
                                    else:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                        staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                        require ext_call.return_data[18 len 14]
                                        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        if ext_call.return_data[50 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if ext_call.return_data[18 len 14] <= 0:
                                            revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                        if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                        require ext_call.return_data[50 len 14]
                                        require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                        staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 160
                                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                            if not ext_call.return_data[0]:
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                    if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                            else:
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[12 len 20]:
                                    require ext_code.size(stor0)
                                    staticcall stor0.factory() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                        if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                    gas gas_remaining wei
                                        else:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                    gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                            require ext_call.return_data[18 len 14]
                                            require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                            staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 160
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0]
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                            require ext_call.return_data[50 len 14]
                                            require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                            staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 160
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0]
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                    gas gas_remaining wei
                                        else:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                    gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                            require ext_call.return_data[18 len 14]
                                            require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                            staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 160
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0]
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                            require ext_call.return_data[50 len 14]
                                            require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                            staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 160
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0]
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[12 len 20]:
                                        if ext_call.return_data[0]:
                                            require ext_call.return_data[0]
                                            if 0 / ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x4c7198f4 with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not 0 / ext_call.return_data[0] / 10^10:
                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_512 = block.timestamp
                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                        else:
                                            require 0 / ext_call.return_data[0] / 10^10
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x18160ddd with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0] / 10^6
                                            stor2[address(arg1)].field_512 = block.timestamp
                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require ext_code.size(stor0)
                                        staticcall stor0.factory() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                        gas gas_remaining wei
                                            else:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                        gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                if ext_call.return_data[18 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if ext_call.return_data[50 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                require ext_call.return_data[18 len 14]
                                                require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                                staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 160
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0]
                                                        if 0 / ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if not ext_call.return_data[0]:
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                if ext_call.return_data[50 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if ext_call.return_data[18 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                require ext_call.return_data[50 len 14]
                                                require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                                staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 160
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0]
                                                        if 0 / ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if not ext_call.return_data[0]:
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                        gas gas_remaining wei
                                            else:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                        gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                                if ext_call.return_data[18 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if ext_call.return_data[50 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                require ext_call.return_data[18 len 14]
                                                require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                                staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 160
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0]
                                                        if 0 / ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if not ext_call.return_data[0]:
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                if ext_call.return_data[50 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if ext_call.return_data[18 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                require ext_call.return_data[50 len 14]
                                                require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                                staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 160
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0]
                                                        if 0 / ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if not ext_call.return_data[0]:
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
        else:
            if block.timestamp - stor2[address(arg1)].field_0 > 168 * 24 * 3600:
                if stor2[address(arg1)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if block.timestamp - stor2[address(arg1)].field_512 > 84 * 3600:
                    stor2[address(arg1)].field_0 = stor2[address(arg1)].field_512
                    stor2[address(arg1)].field_256 = stor2[address(arg1)].field_768
                    require ext_code.size(arg1)
                    staticcall arg1.strategy() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0xffa222fe with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).yieldToken() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[12 len 20] == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                        require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                        staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 160
                        if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                        if not ext_call.return_data[0]:
                            require ext_code.size(arg1)
                            staticcall arg1.0x4c7198f4 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not 0 / ext_call.return_data[0] / 10^10:
                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0] / 10^6
                                stor2[address(arg1)].field_512 = block.timestamp
                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                            else:
                                require 0 / ext_call.return_data[0] / 10^10
                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0] / 10^6
                                stor2[address(arg1)].field_512 = block.timestamp
                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            require ext_code.size(arg1)
                            staticcall arg1.0x4c7198f4 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0] / 10^6
                                stor2[address(arg1)].field_512 = block.timestamp
                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                            else:
                                require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                require ext_code.size(arg1)
                                staticcall arg1.0x18160ddd with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] / 10^6 <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0] / 10^6
                                stor2[address(arg1)].field_512 = block.timestamp
                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                    else:
                        if ext_call.return_data[12 len 20] == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                            require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                            staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 160
                            if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                            if not ext_call.return_data[0]:
                                require ext_code.size(arg1)
                                staticcall arg1.0x4c7198f4 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not 0 / ext_call.return_data[0] / 10^10:
                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_512 = block.timestamp
                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                else:
                                    require 0 / ext_call.return_data[0] / 10^10
                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_512 = block.timestamp
                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                require ext_code.size(arg1)
                                staticcall arg1.0x4c7198f4 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                    if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_512 = block.timestamp
                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                else:
                                    require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x18160ddd with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] / 10^6 <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0] / 10^6
                                    stor2[address(arg1)].field_512 = block.timestamp
                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                        else:
                            if ext_call.return_data[12 len 20] == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 160
                                if 10^18 * ext_call.return_data[32] / 10^18 != ext_call.return_data[32]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                if not ext_call.return_data[0]:
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x4c7198f4 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not 0 / ext_call.return_data[0] / 10^10:
                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_512 = block.timestamp
                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                    else:
                                        require 0 / ext_call.return_data[0] / 10^10
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_512 = block.timestamp
                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] / 100 * 10^6:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                    require ext_code.size(arg1)
                                    staticcall arg1.0x4c7198f4 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                        if 0 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_512 = block.timestamp
                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                    else:
                                        require ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                        if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                        if ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        require ext_code.size(arg1)
                                        staticcall arg1.0x18160ddd with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] / 10^6 <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0] / 10^6
                                        stor2[address(arg1)].field_512 = block.timestamp
                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                            else:
                                require ext_code.size(stor0)
                                staticcall stor0.factory() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                        gas gas_remaining wei
                                       args address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[12 len 20]:
                                    require ext_code.size(stor0)
                                    staticcall stor0.factory() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                    if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                    gas gas_remaining wei
                                        else:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                    gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                            require ext_call.return_data[18 len 14]
                                            require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                            staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 160
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0]
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                            require ext_call.return_data[50 len 14]
                                            require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                            staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 160
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0]
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        if not address(ext_call.return_data[0]):
                                            revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) < 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                        if address(ext_call.return_data[0]) == 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) >= 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83:
                                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(2431441379194500172, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                    gas gas_remaining wei
                                        else:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                            staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                    gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                            require ext_call.return_data[18 len 14]
                                            require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                            staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 160
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0]
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            if ext_call.return_data[50 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if ext_call.return_data[18 len 14] <= 0:
                                                revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                            if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                            require ext_call.return_data[50 len 14]
                                            require ext_code.size(0xf4766552d15ae4d256ad41b6cf2933482b0680dc)
                                            staticcall 0xf4766552d15ae4d256ad41b6cf2933482b0680dc.latestRoundData() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 160
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if ext_call.return_data[0]:
                                                    require ext_call.return_data[0]
                                                    if 0 / ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x4c7198f4 with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not 0 / ext_call.return_data[0] / 10^10:
                                                    if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 0 / ext_call.return_data[0] / 10^10
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x18160ddd with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] / 10^6 <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0] / 10^6
                                                    stor2[address(arg1)].field_512 = block.timestamp
                                                    stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                if not ext_call.return_data[0]:
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                        if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                else:
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                            gas gas_remaining wei
                                           args address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if ext_call.return_data[12 len 20]:
                                        require ext_code.size(stor0)
                                        staticcall stor0.factory() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                        if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                        gas gas_remaining wei
                                            else:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                        gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                if ext_call.return_data[18 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if ext_call.return_data[50 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                require ext_call.return_data[18 len 14]
                                                require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                                staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 160
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0]
                                                        if 0 / ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if not ext_call.return_data[0]:
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                if ext_call.return_data[50 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if ext_call.return_data[18 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                require ext_call.return_data[50 len 14]
                                                require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                                staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 160
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0]
                                                        if 0 / ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if not ext_call.return_data[0]:
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            if not address(ext_call.return_data[0]):
                                                revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) < 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                            if address(ext_call.return_data[0]) == 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) >= 0x4068da6c83afcfa0e13ba15a6696662335d5b75:
                                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(290074973475372282, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                        gas gas_remaining wei
                                            else:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x4068da6c83afcfa0e13ba15a6696662335d5b75), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                        gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                                if ext_call.return_data[18 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if ext_call.return_data[50 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                require ext_call.return_data[18 len 14]
                                                require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                                staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 160
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0]
                                                        if 0 / ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if not ext_call.return_data[0]:
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                if ext_call.return_data[50 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if ext_call.return_data[18 len 14] <= 0:
                                                    revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                require ext_call.return_data[50 len 14]
                                                require ext_code.size(0x2553f4eeb82d5a26427b8d1106c51499cba5d99c)
                                                staticcall 0x2553f4eeb82d5a26427b8d1106c51499cba5d99c.latestRoundData() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 160
                                                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    if ext_call.return_data[0]:
                                                        require ext_call.return_data[0]
                                                        if 0 / ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    require ext_code.size(arg1)
                                                    staticcall arg1.0x4c7198f4 with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    require ext_code.size(address(ext_call.return_data[0]))
                                                    staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not 0 / ext_call.return_data[0] / 10^10:
                                                        if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 0 / ext_call.return_data[0] / 10^10
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x18160ddd with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] / 10^6 <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0] / 10^6
                                                        stor2[address(arg1)].field_512 = block.timestamp
                                                        stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                    if not ext_call.return_data[0]:
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require ext_call.return_data[0]
                                                        if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                            if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                    else:
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                                                gas gas_remaining wei
                                               args address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[12 len 20]:
                                            if ext_call.return_data[0]:
                                                require ext_call.return_data[0]
                                                if 0 / ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            require ext_code.size(arg1)
                                            staticcall arg1.0x4c7198f4 with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                            else:
                                                require 0 / ext_call.return_data[0] / 10^10
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                require ext_code.size(address(ext_call.return_data[0]))
                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                require ext_code.size(arg1)
                                                staticcall arg1.0x18160ddd with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0] / 10^6
                                                stor2[address(arg1)].field_512 = block.timestamp
                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                        else:
                                            require ext_code.size(stor0)
                                            staticcall stor0.factory() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                            if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                                if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    if not address(ext_call.return_data[0]):
                                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                            gas gas_remaining wei
                                                else:
                                                    if not address(ext_call.return_data[0]):
                                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                            gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    if ext_call.return_data[18 len 14] <= 0:
                                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                    if ext_call.return_data[50 len 14] <= 0:
                                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                    require ext_call.return_data[18 len 14]
                                                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 160
                                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                        if ext_call.return_data[0]:
                                                            require ext_call.return_data[0]
                                                            if 0 / ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if not ext_call.return_data[0]:
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x4c7198f4 with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                            else:
                                                                require 0 / ext_call.return_data[0] / 10^10
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x4c7198f4 with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                            else:
                                                                require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    if ext_call.return_data[50 len 14] <= 0:
                                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                    if ext_call.return_data[18 len 14] <= 0:
                                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                    if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                    require ext_call.return_data[50 len 14]
                                                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 160
                                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                        if ext_call.return_data[0]:
                                                            require ext_call.return_data[0]
                                                            if 0 / ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if not ext_call.return_data[0]:
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x4c7198f4 with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                            else:
                                                                require 0 / ext_call.return_data[0] / 10^10
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x4c7198f4 with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                            else:
                                                                require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                            else:
                                                if not address(ext_call.return_data[0]):
                                                    revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                                if address(ext_call.return_data[0]) < 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    if not address(ext_call.return_data[0]):
                                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                if address(ext_call.return_data[0]) == 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    revert with 0, 'ApeLibrary: IDENTICAL_ADDRESSES'
                                                if address(ext_call.return_data[0]) >= 0x49d68029688eabf473097a2fc38ef61633a3c7a:
                                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(332536307820063423, address(ext_call.return_data[0])), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                            gas gas_remaining wei
                                                else:
                                                    if not address(ext_call.return_data[0]):
                                                        revert with 0, 'ApeLibrary: ZERO_ADDRESS'
                                                    require ext_code.size(address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)))
                                                    staticcall address(sha3(0, address(ext_call.return_data[0]), sha3(address(ext_call.return_data[0]), 0x49d68029688eabf473097a2fc38ef61633a3c7a), 0xcdf2deca40a0bd56de8e3ce5c7df6727e5b1bf2ac96f283fa9c4b3e6b42ea9d2)).getReserves() with:
                                                            gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                if address(ext_call.return_data[0]) == address(ext_call.return_data[0]):
                                                    if ext_call.return_data[18 len 14] <= 0:
                                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                    if ext_call.return_data[50 len 14] <= 0:
                                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                    if 10^18 * ext_call.return_data[50 len 14] / 10^18 != ext_call.return_data[50 len 14]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                    require ext_call.return_data[18 len 14]
                                                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 160
                                                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                        if ext_call.return_data[0]:
                                                            require ext_call.return_data[0]
                                                            if 0 / ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != ext_call.return_data[32]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if not ext_call.return_data[0]:
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x4c7198f4 with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                            else:
                                                                require 0 / ext_call.return_data[0] / 10^10
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x4c7198f4 with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                            else:
                                                                require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                else:
                                                    if ext_call.return_data[50 len 14] <= 0:
                                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                    if ext_call.return_data[18 len 14] <= 0:
                                                        revert with 0, 32, 34, 0x774170654c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[640 len 30]
                                                    if 10^18 * ext_call.return_data[18 len 14] / 10^18 != ext_call.return_data[18 len 14]:
                                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[639 len 31]
                                                    require ext_call.return_data[50 len 14]
                                                    require ext_code.size(0xf64b636c5dfe1d3555a847341cdc449f612307d0)
                                                    staticcall 0xf64b636c5dfe1d3555a847341cdc449f612307d0.latestRoundData() with:
                                                            gas gas_remaining wei
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 160
                                                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                        if ext_call.return_data[0]:
                                                            require ext_call.return_data[0]
                                                            if 0 / ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        require ext_code.size(arg1)
                                                        staticcall arg1.0x4c7198f4 with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        require ext_code.size(address(ext_call.return_data[0]))
                                                        staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                gas gas_remaining wei
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not 0 / ext_call.return_data[0] / 10^10:
                                                            if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require 0 / ext_call.return_data[0] / 10^10
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x18160ddd with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] / 10^6 <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0] / 10^6
                                                            stor2[address(arg1)].field_512 = block.timestamp
                                                            stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                    else:
                                                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != ext_call.return_data[32]:
                                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                        if not ext_call.return_data[0]:
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x4c7198f4 with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not 0 / ext_call.return_data[0] / 10^10:
                                                                if 0 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                            else:
                                                                require 0 / ext_call.return_data[0] / 10^10
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 0 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if 0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > 0 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (0 / ext_call.return_data[0] / 10^10) - (0 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
                                                        else:
                                                            require ext_call.return_data[0]
                                                            if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] != 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6:
                                                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                            require ext_code.size(arg1)
                                                            staticcall arg1.0x4c7198f4 with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            require ext_code.size(address(ext_call.return_data[0]))
                                                            staticcall address(ext_call.return_data[0]).compoundFee() with:
                                                                    gas gas_remaining wei
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                if 0 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) / ext_call.return_data[0] / 10^6
                                                            else:
                                                                require ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 != ext_call.return_data[0]:
                                                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, ext_call.return_data[101 len 31]
                                                                if ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000 > ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                require ext_code.size(address(ext_call.return_data[0]))
                                                                staticcall address(ext_call.return_data[0]).getPoolBalance() with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) < ext_call.return_data[0]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                require ext_code.size(arg1)
                                                                staticcall arg1.0x18160ddd with:
                                                                        gas gas_remaining wei
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                require return_data.size >= 32
                                                                if ext_call.return_data[0] / 10^6 <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0] / 10^6
                                                                stor2[address(arg1)].field_512 = block.timestamp
                                                                stor2[address(arg1)].field_768 = ext_call.return_data[0] + (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10) - (ext_call.return_data[0] * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[32] / 100 * 10^6 / ext_call.return_data[0] / 10^10 * ext_call.return_data[0] / 1000) / ext_call.return_data[0] / 10^6
}



}
