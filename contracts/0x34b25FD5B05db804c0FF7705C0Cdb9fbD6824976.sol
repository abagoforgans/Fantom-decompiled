contract main {




// =====================  Runtime code  =====================


#
#  - deposit(address arg1, uint256 arg2, uint256 arg3)
#  - set(uint256 arg1, uint256 arg2, bool arg3)
#
const sub_c0577b81(?) = 10

const sub_cc80ea9b(?) = 5


address owner;
address sub_9b8e5563Address;
uint32 stor2;
address devaddr;
uint32 stor3;
address opAddr;
array of struct poolInfo;
mapping of struct stakedBalance;
uint256 totalAllocPoint;
address sub_6b6967aaAddress;
uint256 sub_1869a00d;
uint256 sub_715fda7b;
uint256 sub_4f7acea1;

function poolLength() payable {
    return poolInfo.length
}

function poolInfo(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    return poolInfo[arg1].field_0, poolInfo[arg1].field_256, poolInfo[arg1].field_512, poolInfo[arg1].field_768
}

function totalAllocPoint() payable {
    return totalAllocPoint
}

function sub_1869a00d(?) payable {
    return sub_1869a00d
}

function sub_4f7acea1(?) payable {
    return sub_4f7acea1
}

function opAddr() payable {
    return address(opAddr)
}

function sub_6b6967aa(?) payable {
    return sub_6b6967aaAddress
}

function sub_6f90406f(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    return poolInfo[arg1].field_256
}

function sub_715fda7b(?) payable {
    return sub_715fda7b
}

function getStakedBalance(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return stakedBalance[arg1][address(arg2)].field_0
}

function owner() payable {
    return owner
}

function userInfo(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return stakedBalance[arg1][arg2].field_0, 
           stakedBalance[arg1][arg2].field_256,
           stakedBalance[arg1][arg2].field_512,
           stakedBalance[arg1][arg2].field_768
}

function sub_9b8e5563(?) payable {
    return sub_9b8e5563Address
}

function devaddr() payable {
    return address(devaddr)
}

function _fallback() payable {
    revert
}

function sub_cdda56e0(?) payable {
    if sub_4f7acea1 > block.timestamp:
        return sub_1869a00d
    return sub_715fda7b
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function sub_a7a0b84a(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    sub_9b8e5563Address = arg1
}

function opFund(address arg1) payable {
    require calldata.size - 4 >= 32
    if address(opAddr) != msg.sender:
        if owner != msg.sender:
            revert with 0, 'op: wut?'
    address(opAddr) = arg1
}

function dev(address arg1) payable {
    require calldata.size - 4 >= 32
    if address(devaddr) != msg.sender:
        if owner != msg.sender:
            revert with 0, 'dev: wut?'
    address(devaddr) = arg1
}

function sub_4f2d7cd7(?) payable {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if sub_4f7acea1 > 0:
        if sub_4f7acea1 <= block.timestamp:
            sub_1869a00d = sub_715fda7b
    if arg1 <= block.timestamp:
        revert with 0, 'no valid'
    sub_715fda7b = arg2
    sub_4f7acea1 = arg1
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0xfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function getPoolWeight(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if not poolInfo[arg1].field_256:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        if totalAllocPoint:
            return (0 / totalAllocPoint)
    else:
        if 10000 * poolInfo[arg1].field_256 / poolInfo[arg1].field_256 != 10000:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        if totalAllocPoint:
            return (10000 * poolInfo[arg1].field_256 / totalAllocPoint)
    ('iszero', ('stor', ('name', 'totalAllocPoint', 6)))
    revert
}

function emergencyWithdraw(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if stakedBalance[arg1][msg.sender].field_768 != msg.sender:
        revert with 0, 'on valid'
    if eth.balance(this.address) < 0:
        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
    if not ext_code.size(poolInfo[arg1].field_0):
        revert with 0, 'Address: call to non-contract'
    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg1][msg.sender].field_32
    call poolInfo[arg1].field_0 with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args stakedBalance[arg1][msg.sender].field_0, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg1][msg.sender].field_0
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    emit EmergencyWithdraw(stakedBalance[arg1][msg.sender].field_0, msg.sender, arg1);
    stakedBalance[arg1][msg.sender].field_0 = 0
    stakedBalance[arg1][msg.sender].field_256 = 0
}

function getRewardRate(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg1 >= sub_4f7acea1:
        if arg1 > arg2:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_715fda7b:
            return 0
        if (arg2 * sub_715fda7b) - (arg1 * sub_715fda7b) / sub_715fda7b != arg2 - arg1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        return ((arg2 * sub_715fda7b) - (arg1 * sub_715fda7b) / 24 * 3600)
    if arg2 <= sub_4f7acea1:
        if arg1 > arg2:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_1869a00d:
            return 0
        if (arg2 * sub_1869a00d) - (arg1 * sub_1869a00d) / sub_1869a00d != arg2 - arg1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        return ((arg2 * sub_1869a00d) - (arg1 * sub_1869a00d) / 24 * 3600)
    if sub_4f7acea1 > arg2:
        revert with 0, 'SafeMath: subtraction overflow'
    if not sub_715fda7b:
        if arg1 > sub_4f7acea1:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_1869a00d:
            return 0
        if (sub_4f7acea1 * sub_1869a00d) - (arg1 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - arg1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        return ((sub_4f7acea1 * sub_1869a00d) - (arg1 * sub_1869a00d) / 24 * 3600)
    if (arg2 * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / sub_715fda7b != arg2 - sub_4f7acea1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if arg1 > sub_4f7acea1:
        revert with 0, 'SafeMath: subtraction overflow'
    if not sub_1869a00d:
        if (arg2 * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((arg2 * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600)
    if (sub_4f7acea1 * sub_1869a00d) - (arg1 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if (arg2 * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
        revert with 0, 'SafeMath: addition overflow'
    return ((arg2 * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (arg1 * sub_1869a00d) / 24 * 3600)
}

function updatePool(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if block.timestamp > poolInfo[arg1].field_512:
        require ext_code.size(poolInfo[arg1].field_0)
        staticcall poolInfo[arg1].field_0.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0]:
            if poolInfo[arg1].field_512 >= sub_4f7acea1:
                if poolInfo[arg1].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not sub_715fda7b:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                    else:
                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                    else:
                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                    else:
                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                        if not 85 * 0 / totalAllocPoint / 100:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                else:
                    if (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / sub_715fda7b != block.timestamp - poolInfo[arg1].field_512:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            if not 85 * 0 / totalAllocPoint / 100:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 != poolInfo[arg1].field_256:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
            else:
                if block.timestamp <= sub_4f7acea1:
                    if poolInfo[arg1].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_1869a00d:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            if not 85 * 0 / totalAllocPoint / 100:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != block.timestamp - poolInfo[arg1].field_512:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                else:
                    if sub_4f7acea1 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_715fda7b:
                        if poolInfo[arg1].field_512 > sub_4f7acea1:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_1869a00d:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg1].field_512:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / sub_715fda7b != block.timestamp - sub_4f7acea1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if poolInfo[arg1].field_512 > sub_4f7acea1:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_1869a00d:
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg1].field_512:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
        poolInfo[arg1].field_512 = block.timestamp
}

function massUpdatePools() payable {
    idx = 0
    while idx < poolInfo.length:
        mem[0] = 4
        if block.timestamp > poolInfo[idx].field_512:
            mem[100] = this.address
            require ext_code.size(poolInfo[idx].field_0)
            staticcall poolInfo[idx].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                if poolInfo[idx].field_512 >= sub_4f7acea1:
                    if poolInfo[idx].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_715fda7b:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                        else:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                            mem[100] = address(opAddr)
                            mem[132] = 0
                            mem[164] = poolInfo[idx].field_512
                            mem[196] = block.timestamp
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                            mem[100] = address(opAddr)
                            mem[132] = 5 * 0 / totalAllocPoint / 100
                            mem[164] = poolInfo[idx].field_512
                            mem[196] = block.timestamp
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                            if not 85 * 0 / totalAllocPoint / 100:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / sub_715fda7b != block.timestamp - poolInfo[idx].field_512:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                        if not (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                mem[100] = address(opAddr)
                                mem[132] = 0
                                mem[164] = poolInfo[idx].field_512
                                mem[196] = block.timestamp
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                mem[100] = address(opAddr)
                                mem[132] = 5 * 0 / totalAllocPoint / 100
                                mem[164] = poolInfo[idx].field_512
                                mem[196] = block.timestamp
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 != poolInfo[idx].field_256:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                            else:
                                if 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(devaddr), 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                mem[100] = address(opAddr)
                                mem[132] = 0
                                mem[164] = poolInfo[idx].field_512
                                mem[196] = block.timestamp
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                            else:
                                if 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                mem[100] = address(opAddr)
                                mem[132] = 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100
                                mem[164] = poolInfo[idx].field_512
                                mem[196] = block.timestamp
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(opAddr), 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                else:
                    if block.timestamp <= sub_4f7acea1:
                        if poolInfo[idx].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_1869a00d:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                mem[100] = address(opAddr)
                                mem[132] = 0
                                mem[164] = poolInfo[idx].field_512
                                mem[196] = block.timestamp
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                mem[100] = address(opAddr)
                                mem[132] = 5 * 0 / totalAllocPoint / 100
                                mem[164] = poolInfo[idx].field_512
                                mem[196] = block.timestamp
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / sub_1869a00d != block.timestamp - poolInfo[idx].field_512:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if not (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 0
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 5 * 0 / totalAllocPoint / 100
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[idx].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 10 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 10 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 0
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 5 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 5 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 5 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if sub_4f7acea1 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_715fda7b:
                            if poolInfo[idx].field_512 > sub_4f7acea1:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_1869a00d:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 0
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 5 * 0 / totalAllocPoint / 100
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[idx].field_512:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if not (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * 0 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                else:
                                    if poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / sub_715fda7b != block.timestamp - sub_4f7acea1:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if poolInfo[idx].field_512 > sub_4f7acea1:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_1869a00d:
                                if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * 0 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                else:
                                    if poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[idx].field_512:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * 0 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                else:
                                    if poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
            poolInfo[idx].field_512 = block.timestamp
        idx = idx + 1
        continue 
}

function harvest(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if block.timestamp <= poolInfo[arg1].field_512:
        require arg1 < poolInfo.length
        if not stakedBalance[arg1][address(msg.sender)].field_0:
            revert with 0, 'nothing to harvest'
        if poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / stakedBalance[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(msg.sender)].field_256 > poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        if not (poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12) - stakedBalance[arg1][address(msg.sender)].field_256:
            if not stakedBalance[arg1][msg.sender].field_0:
                stakedBalance[arg1][msg.sender].field_256 = 0
            else:
                if poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / stakedBalance[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                stakedBalance[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / 10^12
        else:
            require ext_code.size(sub_9b8e5563Address)
            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                 gas gas_remaining wei
                args 0, uint32(msg.sender), (poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12) - stakedBalance[arg1][address(msg.sender)].field_256, stakedBalance[arg1][address(msg.sender)].field_512, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            stakedBalance[arg1][address(msg.sender)].field_512 = block.timestamp
            if not stakedBalance[arg1][msg.sender].field_0:
                stakedBalance[arg1][msg.sender].field_256 = 0
            else:
                if poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / stakedBalance[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                stakedBalance[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / 10^12
    else:
        require ext_code.size(poolInfo[arg1].field_0)
        staticcall poolInfo[arg1].field_0.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            poolInfo[arg1].field_512 = block.timestamp
            require arg1 < poolInfo.length
            if not stakedBalance[arg1][address(msg.sender)].field_0:
                revert with 0, 'nothing to harvest'
            if poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / stakedBalance[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(msg.sender)].field_256 > poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            if not (poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12) - stakedBalance[arg1][address(msg.sender)].field_256:
                if not stakedBalance[arg1][msg.sender].field_0:
                    stakedBalance[arg1][msg.sender].field_256 = 0
                else:
                    if poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / stakedBalance[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    stakedBalance[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / 10^12
            else:
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                     gas gas_remaining wei
                    args 0, uint32(msg.sender), (poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12) - stakedBalance[arg1][address(msg.sender)].field_256, stakedBalance[arg1][address(msg.sender)].field_512, block.timestamp
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                stakedBalance[arg1][address(msg.sender)].field_512 = block.timestamp
                if not stakedBalance[arg1][msg.sender].field_0:
                    stakedBalance[arg1][msg.sender].field_256 = 0
                else:
                    if poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / stakedBalance[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                    stakedBalance[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / 10^12
        else:
            if poolInfo[arg1].field_512 >= sub_4f7acea1:
                if poolInfo[arg1].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not sub_715fda7b:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                    else:
                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                    else:
                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if not 0 / totalAllocPoint:
                        if ext_call.return_data[0] <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require ext_call.return_data[0]
                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                            revert with 0, 'SafeMath: addition overflow'
                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                    else:
                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                        if not 85 * 0 / totalAllocPoint / 100:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                else:
                    if (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / sub_715fda7b != block.timestamp - poolInfo[arg1].field_512:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            if not 85 * 0 / totalAllocPoint / 100:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 != poolInfo[arg1].field_256:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
            else:
                if block.timestamp <= sub_4f7acea1:
                    if poolInfo[arg1].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_1869a00d:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            if not 85 * 0 / totalAllocPoint / 100:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != block.timestamp - poolInfo[arg1].field_512:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                else:
                    if sub_4f7acea1 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_715fda7b:
                        if poolInfo[arg1].field_512 > sub_4f7acea1:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_1869a00d:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg1].field_512:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / sub_715fda7b != block.timestamp - sub_4f7acea1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if poolInfo[arg1].field_512 > sub_4f7acea1:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_1869a00d:
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg1].field_512:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg1].field_512, block.timestamp
                                else:
                                    if 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg1].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
            poolInfo[arg1].field_512 = block.timestamp
            require arg1 < poolInfo.length
            if not stakedBalance[arg1][address(msg.sender)].field_0:
                revert with 0, 'nothing to harvest'
            if poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / stakedBalance[arg1][address(msg.sender)].field_0 != poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
            if stakedBalance[arg1][address(msg.sender)].field_256 > poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            if (poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12) - stakedBalance[arg1][address(msg.sender)].field_256:
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                     gas gas_remaining wei
                    args 0, uint32(msg.sender), (poolInfo[arg1].field_768 * stakedBalance[arg1][address(msg.sender)].field_0 / 10^12) - stakedBalance[arg1][address(msg.sender)].field_256, stakedBalance[arg1][address(msg.sender)].field_512, block.timestamp
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                stakedBalance[arg1][address(msg.sender)].field_512 = block.timestamp
            if not stakedBalance[arg1][msg.sender].field_0:
                stakedBalance[arg1][msg.sender].field_256 = 0
            else:
                if poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / stakedBalance[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                stakedBalance[arg1][msg.sender].field_256 = poolInfo[arg1].field_768 * stakedBalance[arg1][msg.sender].field_0 / 10^12
}

function pendingReward(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < poolInfo.length
    require ext_code.size(poolInfo[arg1].field_0)
    staticcall poolInfo[arg1].field_0.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if block.timestamp <= poolInfo[arg1].field_512:
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0 / stakedBalance[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0 / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if not ext_call.return_data[0]:
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0 / stakedBalance[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0 / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if poolInfo[arg1].field_512 >= sub_4f7acea1:
        if poolInfo[arg1].field_512 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_715fda7b:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not 85 * 0 / totalAllocPoint / 100:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / sub_715fda7b != block.timestamp - poolInfo[arg1].field_512:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not 85 * 0 / totalAllocPoint / 100:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg1].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if block.timestamp <= sub_4f7acea1:
        if poolInfo[arg1].field_512 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_1869a00d:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not 85 * 0 / totalAllocPoint / 100:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != block.timestamp - poolInfo[arg1].field_512:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not 85 * 0 / totalAllocPoint / 100:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if sub_4f7acea1 > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow'
    if not sub_715fda7b:
        if poolInfo[arg1].field_512 > sub_4f7acea1:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_1869a00d:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not 85 * 0 / totalAllocPoint / 100:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg1].field_512:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not 85 * 0 / totalAllocPoint / 100:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if (10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 85 * poolInfo[arg1].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / sub_715fda7b != block.timestamp - sub_4f7acea1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if poolInfo[arg1].field_512 > sub_4f7acea1:
        revert with 0, 'SafeMath: subtraction overflow'
    if not sub_1869a00d:
        if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600:
            if totalAllocPoint <= 0:
                revert with 0, 'SafeMath: division by zero'
            require totalAllocPoint
            if not 0 / totalAllocPoint:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not 85 * 0 / totalAllocPoint / 100:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                    revert with 0, 'SafeMath: addition overflow'
                if not stakedBalance[arg1][address(arg2)].field_0:
                    if stakedBalance[arg1][address(arg2)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    return -stakedBalance[arg1][address(arg2)].field_256
                if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 != poolInfo[arg1].field_256:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg1].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
        revert with 0, 'SafeMath: addition overflow'
    if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not 85 * 0 / totalAllocPoint / 100:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not stakedBalance[arg1][address(arg2)].field_0:
                if stakedBalance[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -stakedBalance[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg1].field_256:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if totalAllocPoint <= 0:
        revert with 0, 'SafeMath: division by zero'
    require totalAllocPoint
    if not poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not stakedBalance[arg1][address(arg2)].field_0:
            if stakedBalance[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -stakedBalance[arg1][address(arg2)].field_256
        if (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((0 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
    if 10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
        revert with 0, 'SafeMath: addition overflow'
    if not stakedBalance[arg1][address(arg2)].field_0:
        if stakedBalance[arg1][address(arg2)].field_256 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        return -stakedBalance[arg1][address(arg2)].field_256
    if (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / stakedBalance[arg1][address(arg2)].field_0 != (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if stakedBalance[arg1][address(arg2)].field_256 > (10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12:
        revert with 0, 'SafeMath: subtraction overflow'
    return (((10^12 * 85 * poolInfo[arg1].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg1].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0] * stakedBalance[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * stakedBalance[arg1][address(arg2)].field_0) / 10^12) - stakedBalance[arg1][address(arg2)].field_256)
}

function add(uint256 arg1, address arg2, uint256 arg3, bool arg4) payable {
    require calldata.size - 4 >= 128
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if arg4:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 4
            if block.timestamp > poolInfo[idx].field_512:
                mem[100] = this.address
                require ext_code.size(poolInfo[idx].field_0)
                staticcall poolInfo[idx].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0]:
                    if poolInfo[idx].field_512 >= sub_4f7acea1:
                        if poolInfo[idx].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_715fda7b:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                mem[100] = address(opAddr)
                                mem[132] = 0
                                mem[164] = poolInfo[idx].field_512
                                mem[196] = block.timestamp
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                mem[100] = address(opAddr)
                                mem[132] = 5 * 0 / totalAllocPoint / 100
                                mem[164] = poolInfo[idx].field_512
                                mem[196] = block.timestamp
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / sub_715fda7b != block.timestamp - poolInfo[idx].field_512:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if not (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 0
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 5 * 0 / totalAllocPoint / 100
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 != poolInfo[idx].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 0
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[idx].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                    else:
                        if block.timestamp <= sub_4f7acea1:
                            if poolInfo[idx].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_1869a00d:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 0
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                    mem[100] = address(opAddr)
                                    mem[132] = 5 * 0 / totalAllocPoint / 100
                                    mem[164] = poolInfo[idx].field_512
                                    mem[196] = block.timestamp
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / sub_1869a00d != block.timestamp - poolInfo[idx].field_512:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if not (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * 0 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                else:
                                    if poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                        else:
                            if sub_4f7acea1 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_715fda7b:
                                if poolInfo[idx].field_512 > sub_4f7acea1:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_1869a00d:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 0
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                        mem[100] = address(opAddr)
                                        mem[132] = 5 * 0 / totalAllocPoint / 100
                                        mem[164] = poolInfo[idx].field_512
                                        mem[196] = block.timestamp
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                else:
                                    if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[idx].field_512:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if not (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 0
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 5 * 0 / totalAllocPoint / 100
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    else:
                                        if poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 10 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 10 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 0
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 5 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 5 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 5 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                            else:
                                if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / sub_715fda7b != block.timestamp - sub_4f7acea1:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if poolInfo[idx].field_512 > sub_4f7acea1:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_1869a00d:
                                    if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 0
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 5 * 0 / totalAllocPoint / 100
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    else:
                                        if poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 0
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                else:
                                    if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[idx].field_512:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 10 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 0
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 5 * 0 / totalAllocPoint / 100
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 5 * 0 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    else:
                                        if poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(devaddr), 10 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 0
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 0, poolInfo[idx].field_512, block.timestamp
                                        else:
                                            if 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            mem[96] = 0xa647e8ec00000000000000000000000000000000000000000000000000000000
                                            mem[100] = address(opAddr)
                                            mem[132] = 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100
                                            mem[164] = poolInfo[idx].field_512
                                            mem[196] = block.timestamp
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args address(opAddr), 5 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[idx].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 85 * poolInfo[idx].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[idx].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.timestamp
            idx = idx + 1
            continue 
    if arg1 + totalAllocPoint < totalAllocPoint:
        revert with 0, 'SafeMath: addition overflow'
    totalAllocPoint += arg1
    poolInfo.length++
    poolInfo[poolInfo.length].field_0 = arg2
    poolInfo[poolInfo.length].field_256 = arg1
    if arg3 > block.timestamp:
        poolInfo[poolInfo.length].field_512 = arg3
    else:
        poolInfo[poolInfo.length].field_512 = block.timestamp
    poolInfo[poolInfo.length].field_768 = 0
}

function withdrawAll(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 < poolInfo.length
    if stakedBalance[arg2][address(arg1)].field_768 != msg.sender:
        revert with 0, 'only funder'
    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
        revert with 0, 'withdraw: not good'
    require arg2 < poolInfo.length
    if block.timestamp <= poolInfo[arg2].field_512:
        require arg2 < poolInfo.length
        if not stakedBalance[arg2][address(arg1)].field_0:
            revert with 0, 'nothing to harvest'
        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
            require ext_code.size(sub_9b8e5563Address)
            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                 gas gas_remaining wei
                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        stakedBalance[arg2][address(arg1)].field_0 = 0
        stakedBalance[arg2][address(arg1)].field_256 = 0
        if eth.balance(this.address) < 0:
            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
        if not ext_code.size(poolInfo[arg2].field_0):
            revert with 0, 'Address: call to non-contract'
        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
        mem[324 len 0] = 0
    else:
        require ext_code.size(poolInfo[arg2].field_0)
        staticcall poolInfo[arg2].field_0.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            poolInfo[arg2].field_512 = block.timestamp
            require arg2 < poolInfo.length
            if not stakedBalance[arg2][address(arg1)].field_0:
                revert with 0, 'nothing to harvest'
            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                     gas gas_remaining wei
                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            stakedBalance[arg2][address(arg1)].field_0 = 0
            stakedBalance[arg2][address(arg1)].field_256 = 0
            if eth.balance(this.address) < 0:
                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
            if not ext_code.size(poolInfo[arg2].field_0):
                revert with 0, 'Address: call to non-contract'
            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
        else:
            if poolInfo[arg2].field_512 >= sub_4f7acea1:
                if poolInfo[arg2].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not sub_715fda7b:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    mem[324 len 0] = 0
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if 85 * 0 / totalAllocPoint / 100:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                    else:
                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                if not ext_code.size(poolInfo[arg2].field_0):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                else:
                    if (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / sub_715fda7b != block.timestamp - poolInfo[arg2].field_512:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if 0 / totalAllocPoint:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if 85 * 0 / totalAllocPoint / 100:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                        else:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                    else:
                        if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 != poolInfo[arg2].field_256:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                            else:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                        else:
                            if 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                if not ext_code.size(poolInfo[arg2].field_0):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                            else:
                                if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
            else:
                if block.timestamp <= sub_4f7acea1:
                    if poolInfo[arg2].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_1869a00d:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if 0 / totalAllocPoint:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                            else:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                if eth.balance(this.address) < 0:
                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                if not ext_code.size(poolInfo[arg2].field_0):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                mem[324 len 0] = 0
                        else:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                    else:
                        if (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / sub_1869a00d != block.timestamp - poolInfo[arg2].field_512:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if 0 / totalAllocPoint:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if 0 / totalAllocPoint:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                            else:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if 85 * 0 / totalAllocPoint / 100:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                        else:
                            if poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg2].field_256:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                else:
                                    if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                            else:
                                if 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                else:
                    if sub_4f7acea1 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_715fda7b:
                        if poolInfo[arg2].field_512 > sub_4f7acea1:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_1869a00d:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if 85 * 0 / totalAllocPoint / 100:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if 85 * 0 / totalAllocPoint / 100:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                        else:
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg2].field_512:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600:
                                if poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg2].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                else:
                                    if 10 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 = 0
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if 0 / totalAllocPoint:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                    else:
                        if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / sub_715fda7b != block.timestamp - sub_4f7acea1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if poolInfo[arg2].field_512 > sub_4f7acea1:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_1869a00d:
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600:
                                if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 != poolInfo[arg2].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                else:
                                    if 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                            else:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * 0 / totalAllocPoint / 100:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                        else:
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg2].field_512:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600:
                                if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg2].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                else:
                                    if 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                            else:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * 0 / totalAllocPoint / 100:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * 0 / totalAllocPoint / 100:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * 0 / totalAllocPoint / 100:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 = 0
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 = 0
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if stakedBalance[arg2][address(arg1)].field_0 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 = 0
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_32
                                            mem[324 len 0] = 0
    call poolInfo[arg2].field_0 with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args stakedBalance[arg2][address(arg1)].field_0, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, stakedBalance[arg2][address(arg1)].field_0
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    emit Withdraw(stakedBalance[arg2][address(arg1)].field_0, msg.sender, arg2);
}

function withdraw(address arg1, uint256 arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    require arg2 < poolInfo.length
    if stakedBalance[arg2][address(arg1)].field_768 != msg.sender:
        revert with 0, 'only funder'
    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
        revert with 0, 'withdraw: not good'
    require arg2 < poolInfo.length
    if block.timestamp <= poolInfo[arg2].field_512:
        require arg2 < poolInfo.length
        if not stakedBalance[arg2][address(arg1)].field_0:
            revert with 0, 'nothing to harvest'
        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            stakedBalance[arg2][address(arg1)].field_0 -= arg3
            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                stakedBalance[arg2][address(arg1)].field_256 = 0
            else:
                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
            if eth.balance(this.address) < 0:
                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
            if not ext_code.size(poolInfo[arg2].field_0):
                revert with 0, 'Address: call to non-contract'
            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
        else:
            require ext_code.size(sub_9b8e5563Address)
            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                 gas gas_remaining wei
                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            stakedBalance[arg2][address(arg1)].field_0 -= arg3
            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                if not ext_code.size(poolInfo[arg2].field_0):
                    revert with 0, 'Address: call to non-contract'
                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
            else:
                stakedBalance[arg2][address(arg1)].field_256 = 0
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                if not ext_code.size(poolInfo[arg2].field_0):
                    revert with 0, 'Address: call to non-contract'
                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                mem[324 len 0] = 0
    else:
        require ext_code.size(poolInfo[arg2].field_0)
        staticcall poolInfo[arg2].field_0.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            poolInfo[arg2].field_512 = block.timestamp
            require arg2 < poolInfo.length
            if not stakedBalance[arg2][address(arg1)].field_0:
                revert with 0, 'nothing to harvest'
            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                    if not ext_code.size(poolInfo[arg2].field_0):
                        revert with 0, 'Address: call to non-contract'
                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                else:
                    stakedBalance[arg2][address(arg1)].field_256 = 0
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                    if not ext_code.size(poolInfo[arg2].field_0):
                        revert with 0, 'Address: call to non-contract'
                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                    mem[324 len 0] = 0
            else:
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                     gas gas_remaining wei
                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                    if not ext_code.size(poolInfo[arg2].field_0):
                        revert with 0, 'Address: call to non-contract'
                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                else:
                    stakedBalance[arg2][address(arg1)].field_256 = 0
                    if eth.balance(this.address) < 0:
                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                    if not ext_code.size(poolInfo[arg2].field_0):
                        revert with 0, 'Address: call to non-contract'
                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                    mem[324 len 0] = 0
        else:
            if poolInfo[arg2].field_512 >= sub_4f7acea1:
                if poolInfo[arg2].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not sub_715fda7b:
                    if totalAllocPoint <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalAllocPoint
                    if not 0 / totalAllocPoint:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                    else:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                    else:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    mem[324 len 0] = 0
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                    else:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                    else:
                        if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                             gas gas_remaining wei
                            args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    mem[324 len 0] = 0
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                        else:
                            if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[arg2].field_512 = block.timestamp
                                require arg2 < poolInfo.length
                                if not stakedBalance[arg2][address(arg1)].field_0:
                                    revert with 0, 'nothing to harvest'
                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                if not 85 * 0 / totalAllocPoint / 100:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                else:
                    if (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / sub_715fda7b != block.timestamp - poolInfo[arg2].field_512:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if 0 / totalAllocPoint:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if 0 / totalAllocPoint:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if 85 * 0 / totalAllocPoint / 100:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                            else:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                    else:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                        else:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                    else:
                        if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 != poolInfo[arg2].field_256:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                            else:
                                if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                        else:
                            if 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                            else:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (poolInfo[arg2].field_512 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
            else:
                if block.timestamp <= sub_4f7acea1:
                    if poolInfo[arg2].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_1869a00d:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if 85 * 0 / totalAllocPoint / 100:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if 85 * 0 / totalAllocPoint / 100:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                        else:
                            if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            require ext_code.size(sub_9b8e5563Address)
                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                 gas gas_remaining wei
                                args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if not 85 * 0 / totalAllocPoint / 100:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                            else:
                                if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[arg2].field_512 = block.timestamp
                                    require arg2 < poolInfo.length
                                    if not stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'nothing to harvest'
                                    if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                    else:
                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                    if eth.balance(this.address) < 0:
                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                    if not ext_code.size(poolInfo[arg2].field_0):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    if 85 * 0 / totalAllocPoint / 100:
                                        if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                    else:
                        if (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / sub_1869a00d != block.timestamp - poolInfo[arg2].field_512:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600:
                            if poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg2].field_256:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                if 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                            else:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                else:
                                    if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                        else:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if 0 / totalAllocPoint:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                            else:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                else:
                    if sub_4f7acea1 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_715fda7b:
                        if poolInfo[arg2].field_512 > sub_4f7acea1:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not sub_1869a00d:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if 0 / totalAllocPoint:
                                if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if 0 / totalAllocPoint:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                            else:
                                require ext_code.size(sub_9b8e5563Address)
                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                     gas gas_remaining wei
                                    args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        else:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[arg2].field_512 = block.timestamp
                                        require arg2 < poolInfo.length
                                        if not stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'nothing to harvest'
                                        if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                            require ext_code.size(sub_9b8e5563Address)
                                            call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                        if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                        if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                            stakedBalance[arg2][address(arg1)].field_256 = 0
                                        else:
                                            if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                        if eth.balance(this.address) < 0:
                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                        if not ext_code.size(poolInfo[arg2].field_0):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        if not 85 * 0 / totalAllocPoint / 100:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                        else:
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg2].field_512:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                            else:
                                if poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg2].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                else:
                                    if 10 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        if 5 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                    else:
                        if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / sub_715fda7b != block.timestamp - sub_4f7acea1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if poolInfo[arg2].field_512 > sub_4f7acea1:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if sub_1869a00d:
                            if (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / sub_1869a00d != sub_4f7acea1 - poolInfo[arg2].field_512:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600:
                                if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 != poolInfo[arg2].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                else:
                                    if 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                        if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) + (sub_4f7acea1 * sub_1869a00d) - (poolInfo[arg2].field_512 * sub_1869a00d) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                            else:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                else:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                        else:
                            if (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if not (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if 0 / totalAllocPoint:
                                    if 10 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if 0 / totalAllocPoint:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                    else:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                            if eth.balance(this.address) < 0:
                                                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                            if not ext_code.size(poolInfo[arg2].field_0):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not 0 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * 0 / totalAllocPoint / 0 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * 0 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * 0 / totalAllocPoint / 0 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * 0 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * 0 / totalAllocPoint / 100 / 85 * 0 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * 0 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                            else:
                                if poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 != poolInfo[arg2].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 0, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                else:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                else:
                                    if 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 10:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    require ext_code.size(sub_9b8e5563Address)
                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                         gas gas_remaining wei
                                        args 0, uint32(stor2), 10 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 0, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                            if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                            if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                stakedBalance[arg2][address(arg1)].field_256 = 0
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                        require ext_code.size(sub_9b8e5563Address)
                                        call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                             gas gas_remaining wei
                                            args 0, uint32(stor3), 5 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100, poolInfo[arg2].field_512, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if not poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[arg2].field_512 = block.timestamp
                                            require arg2 < poolInfo.length
                                            if not stakedBalance[arg2][address(arg1)].field_0:
                                                revert with 0, 'nothing to harvest'
                                            if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                require ext_code.size(sub_9b8e5563Address)
                                                call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                     gas gas_remaining wei
                                                    args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                    stakedBalance[arg2][address(arg1)].field_256 = 0
                                                else:
                                                    if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                    stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                if eth.balance(this.address) < 0:
                                                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                if not ext_code.size(poolInfo[arg2].field_0):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint != 85:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                            if not 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                            else:
                                                if 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 != 10^12:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]) + poolInfo[arg2].field_768 < poolInfo[arg2].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[arg2].field_768 += 10^12 * 85 * poolInfo[arg2].field_256 * (block.timestamp * sub_715fda7b) - (sub_4f7acea1 * sub_715fda7b) / 24 * 3600 / totalAllocPoint / 100 / ext_call.return_data[0]
                                                poolInfo[arg2].field_512 = block.timestamp
                                                require arg2 < poolInfo.length
                                                if not stakedBalance[arg2][address(arg1)].field_0:
                                                    revert with 0, 'nothing to harvest'
                                                if poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / stakedBalance[arg2][address(arg1)].field_0 != poolInfo[arg2].field_768:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                if stakedBalance[arg2][address(arg1)].field_256 > poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256:
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    else:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                        if eth.balance(this.address) < 0:
                                                            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                        if not ext_code.size(poolInfo[arg2].field_0):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    require ext_code.size(sub_9b8e5563Address)
                                                    call sub_9b8e5563Address.mint(address rg1, uint256 rg2, uint256 rg3, uint256 rg4) with:
                                                         gas gas_remaining wei
                                                        args 0, 0, (poolInfo[arg2].field_768 * stakedBalance[arg2][address(arg1)].field_0 / 10^12) - stakedBalance[arg2][address(arg1)].field_256, stakedBalance[arg2][address(arg1)].field_512, block.timestamp
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    stakedBalance[arg2][address(arg1)].field_512 = block.timestamp
                                                    if arg3 > stakedBalance[arg2][address(arg1)].field_0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    stakedBalance[arg2][address(arg1)].field_0 -= arg3
                                                    if not stakedBalance[arg2][address(arg1)].field_0 - arg3:
                                                        stakedBalance[arg2][address(arg1)].field_256 = 0
                                                    else:
                                                        if (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / stakedBalance[arg2][address(arg1)].field_0 - arg3 != poolInfo[arg2].field_768:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lSafeMath: multiplication overfloimestam'
                                                        stakedBalance[arg2][address(arg1)].field_256 = (stakedBalance[arg2][address(arg1)].field_0 * poolInfo[arg2].field_768) - (arg3 * poolInfo[arg2].field_768) / 10^12
                                                    if eth.balance(this.address) < 0:
                                                        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
                                                    if not ext_code.size(poolInfo[arg2].field_0):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg3) >> 32
                                                    mem[324 len 0] = 0
    call poolInfo[arg2].field_0 with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args Mask(224, 32, arg3) << 224, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, arg3
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    emit Withdraw(stakedBalance[arg2][address(arg1)].field_0, msg.sender, arg2);
}



}
